// This file is auto-generated by gen-tests.py

#![allow(non_snake_case)]

use crate::render;

#[test] fn filters_enable_background_accumulate_with_new() { assert_eq!(render("tests/filters/enable-background/accumulate-with-new"), 0); }
#[test] fn filters_enable_background_accumulate() { assert_eq!(render("tests/filters/enable-background/accumulate"), 0); }
#[test] fn filters_enable_background_filter_on_shape() { assert_eq!(render("tests/filters/enable-background/filter-on-shape"), 0); }
#[test] fn filters_enable_background_inherit() { assert_eq!(render("tests/filters/enable-background/inherit"), 0); }
#[test] fn filters_enable_background_new_with_invalid_region_1() { assert_eq!(render("tests/filters/enable-background/new-with-invalid-region-1"), 0); }
#[test] fn filters_enable_background_new_with_invalid_region_2() { assert_eq!(render("tests/filters/enable-background/new-with-invalid-region-2"), 0); }
#[test] fn filters_enable_background_new_with_invalid_region_3() { assert_eq!(render("tests/filters/enable-background/new-with-invalid-region-3"), 0); }
#[test] fn filters_enable_background_new_with_region() { assert_eq!(render("tests/filters/enable-background/new-with-region"), 0); }
#[test] fn filters_enable_background_new() { assert_eq!(render("tests/filters/enable-background/new"), 0); }
#[test] fn filters_enable_background_shapes_after_filter() { assert_eq!(render("tests/filters/enable-background/shapes-after-filter"), 0); }
#[test] fn filters_enable_background_stop_on_the_first_new_1() { assert_eq!(render("tests/filters/enable-background/stop-on-the-first-new-1"), 0); }
#[test] fn filters_enable_background_stop_on_the_first_new_2() { assert_eq!(render("tests/filters/enable-background/stop-on-the-first-new-2"), 0); }
#[test] fn filters_enable_background_with_clip_path() { assert_eq!(render("tests/filters/enable-background/with-clip-path"), 0); }
#[test] fn filters_enable_background_with_filter_on_the_same_element() { assert_eq!(render("tests/filters/enable-background/with-filter-on-the-same-element"), 0); }
#[test] fn filters_enable_background_with_filter() { assert_eq!(render("tests/filters/enable-background/with-filter"), 0); }
#[test] fn filters_enable_background_with_mask() { assert_eq!(render("tests/filters/enable-background/with-mask"), 0); }
#[test] fn filters_enable_background_with_opacity_1() { assert_eq!(render("tests/filters/enable-background/with-opacity-1"), 0); }
#[test] fn filters_enable_background_with_opacity_2() { assert_eq!(render("tests/filters/enable-background/with-opacity-2"), 0); }
#[test] fn filters_enable_background_with_opacity_3() { assert_eq!(render("tests/filters/enable-background/with-opacity-3"), 0); }
#[test] fn filters_enable_background_with_opacity_4() { assert_eq!(render("tests/filters/enable-background/with-opacity-4"), 0); }
#[test] fn filters_enable_background_with_transform() { assert_eq!(render("tests/filters/enable-background/with-transform"), 0); }
#[test] fn filters_feBlend_empty() { assert_eq!(render("tests/filters/feBlend/empty"), 0); }
#[test] fn filters_feBlend_mode_eq_color_burn() { assert_eq!(render("tests/filters/feBlend/mode=color-burn"), 0); }
#[test] fn filters_feBlend_mode_eq_darken() { assert_eq!(render("tests/filters/feBlend/mode=darken"), 0); }
#[test] fn filters_feBlend_mode_eq_hue() { assert_eq!(render("tests/filters/feBlend/mode=hue"), 0); }
#[test] fn filters_feBlend_mode_eq_lighten() { assert_eq!(render("tests/filters/feBlend/mode=lighten"), 0); }
#[test] fn filters_feBlend_mode_eq_multiply() { assert_eq!(render("tests/filters/feBlend/mode=multiply"), 0); }
#[test] fn filters_feBlend_mode_eq_normal() { assert_eq!(render("tests/filters/feBlend/mode=normal"), 0); }
#[test] fn filters_feBlend_mode_eq_screen() { assert_eq!(render("tests/filters/feBlend/mode=screen"), 0); }
#[test] fn filters_feBlend_with_subregion_on_input_1() { assert_eq!(render("tests/filters/feBlend/with-subregion-on-input-1"), 0); }
#[test] fn filters_feBlend_with_subregion_on_input_2() { assert_eq!(render("tests/filters/feBlend/with-subregion-on-input-2"), 0); }
#[test] fn filters_feColorMatrix_invalid_type() { assert_eq!(render("tests/filters/feColorMatrix/invalid-type"), 0); }
#[test] fn filters_feColorMatrix_type_eq_hueRotate_without_an_angle() { assert_eq!(render("tests/filters/feColorMatrix/type=hueRotate-without-an-angle"), 0); }
#[test] fn filters_feColorMatrix_type_eq_hueRotate() { assert_eq!(render("tests/filters/feColorMatrix/type=hueRotate"), 0); }
#[test] fn filters_feColorMatrix_type_eq_luminanceToAlpha() { assert_eq!(render("tests/filters/feColorMatrix/type=luminanceToAlpha"), 0); }
#[test] fn filters_feColorMatrix_type_eq_matrix_with_empty_values() { assert_eq!(render("tests/filters/feColorMatrix/type=matrix-with-empty-values"), 0); }
#[test] fn filters_feColorMatrix_type_eq_matrix_with_non_normalized_values() { assert_eq!(render("tests/filters/feColorMatrix/type=matrix-with-non-normalized-values"), 0); }
#[test] fn filters_feColorMatrix_type_eq_matrix_with_not_enough_values() { assert_eq!(render("tests/filters/feColorMatrix/type=matrix-with-not-enough-values"), 0); }
#[test] fn filters_feColorMatrix_type_eq_matrix_with_too_many_values() { assert_eq!(render("tests/filters/feColorMatrix/type=matrix-with-too-many-values"), 0); }
#[test] fn filters_feColorMatrix_type_eq_matrix_without_values() { assert_eq!(render("tests/filters/feColorMatrix/type=matrix-without-values"), 0); }
#[test] fn filters_feColorMatrix_type_eq_matrix() { assert_eq!(render("tests/filters/feColorMatrix/type=matrix"), 0); }
#[test] fn filters_feColorMatrix_type_eq_saturate_with_a_large_coefficient() { assert_eq!(render("tests/filters/feColorMatrix/type=saturate-with-a-large-coefficient"), 0); }
#[test] fn filters_feColorMatrix_type_eq_saturate_with_negative_coefficient() { assert_eq!(render("tests/filters/feColorMatrix/type=saturate-with-negative-coefficient"), 0); }
#[test] fn filters_feColorMatrix_type_eq_saturate_without_a_coefficient() { assert_eq!(render("tests/filters/feColorMatrix/type=saturate-without-a-coefficient"), 0); }
#[test] fn filters_feColorMatrix_type_eq_saturate() { assert_eq!(render("tests/filters/feColorMatrix/type=saturate"), 0); }
#[test] fn filters_feColorMatrix_without_a_type() { assert_eq!(render("tests/filters/feColorMatrix/without-a-type"), 0); }
#[test] fn filters_feColorMatrix_without_attributes() { assert_eq!(render("tests/filters/feColorMatrix/without-attributes"), 0); }
#[test] fn filters_feComponentTransfer_invalid_type() { assert_eq!(render("tests/filters/feComponentTransfer/invalid-type"), 0); }
#[test] fn filters_feComponentTransfer_mixed_types() { assert_eq!(render("tests/filters/feComponentTransfer/mixed-types"), 0); }
#[test] fn filters_feComponentTransfer_no_children() { assert_eq!(render("tests/filters/feComponentTransfer/no-children"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_discrete_on_blue() { assert_eq!(render("tests/filters/feComponentTransfer/type=discrete-on-blue"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_gamma_on_blue() { assert_eq!(render("tests/filters/feComponentTransfer/type=gamma-on-blue"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_gamma_with_an_invalid_offset() { assert_eq!(render("tests/filters/feComponentTransfer/type=gamma-with-an-invalid-offset"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_gamma_with_invalid_values() { assert_eq!(render("tests/filters/feComponentTransfer/type=gamma-with-invalid-values"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_identity_on_all() { assert_eq!(render("tests/filters/feComponentTransfer/type=identity-on-all"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_linear_on_blue() { assert_eq!(render("tests/filters/feComponentTransfer/type=linear-on-blue"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_linear_with_invalid_values() { assert_eq!(render("tests/filters/feComponentTransfer/type=linear-with-invalid-values"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_linear_with_large_values() { assert_eq!(render("tests/filters/feComponentTransfer/type=linear-with-large-values"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_and_tableValues_eq_1_0_1() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-and-tableValues=1-0-1"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_and_tableValues_eq_1() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-and-tableValues=1"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_and_tableValues_eq_100__100() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-and-tableValues=100--100"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_and_tableValues_eq_1px() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-and-tableValues=1px"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_on_alpha() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-on-alpha"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_on_blue_twice() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-on-blue-twice"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_on_blue_with_sRGB_interpolation() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-on-blue-with-sRGB-interpolation"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_on_blue() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-on-blue"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_with_an_empty_tableValues() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-with-an-empty-tableValues"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_with_large_values() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-with-large-values"), 0); }
#[test] fn filters_feComponentTransfer_type_eq_table_without_tableValues() { assert_eq!(render("tests/filters/feComponentTransfer/type=table-without-tableValues"), 0); }
#[test] fn filters_feComposite_default_operator() { assert_eq!(render("tests/filters/feComposite/default-operator"), 0); }
#[test] fn filters_feComposite_empty() { assert_eq!(render("tests/filters/feComposite/empty"), 0); }
#[test] fn filters_feComposite_invalid_operator() { assert_eq!(render("tests/filters/feComposite/invalid-operator"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic_and_invalid_k1_4() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic-and-invalid-k1-4"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic_on_sRGB() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic-on-sRGB"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic_with_large_k1_4() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic-with-large-k1-4"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic_with_opacity_on_sRGB() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic-with-opacity-on-sRGB"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic_with_opacity() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic-with-opacity"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic_with_some_k1_4() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic-with-some-k1-4"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic_without_k1_4() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic-without-k1-4"), 0); }
#[test] fn filters_feComposite_operator_eq_arithmetic() { assert_eq!(render("tests/filters/feComposite/operator=arithmetic"), 0); }
#[test] fn filters_feComposite_operator_eq_atop() { assert_eq!(render("tests/filters/feComposite/operator=atop"), 0); }
#[test] fn filters_feComposite_operator_eq_in() { assert_eq!(render("tests/filters/feComposite/operator=in"), 0); }
#[test] fn filters_feComposite_operator_eq_out() { assert_eq!(render("tests/filters/feComposite/operator=out"), 0); }
#[test] fn filters_feComposite_operator_eq_over() { assert_eq!(render("tests/filters/feComposite/operator=over"), 0); }
#[test] fn filters_feComposite_operator_eq_xor() { assert_eq!(render("tests/filters/feComposite/operator=xor"), 0); }
#[test] fn filters_feComposite_with_subregion_on_input_1() { assert_eq!(render("tests/filters/feComposite/with-subregion-on-input-1"), 0); }
#[test] fn filters_feComposite_with_subregion_on_input_2() { assert_eq!(render("tests/filters/feComposite/with-subregion-on-input-2"), 0); }
#[test] fn filters_feConvolveMatrix_bias_eq__0_5() { assert_eq!(render("tests/filters/feConvolveMatrix/bias=-0.5"), 0); }
#[test] fn filters_feConvolveMatrix_bias_eq_0_5() { assert_eq!(render("tests/filters/feConvolveMatrix/bias=0.5"), 0); }
#[test] fn filters_feConvolveMatrix_bias_eq_9999() { assert_eq!(render("tests/filters/feConvolveMatrix/bias=9999"), 0); }
#[test] fn filters_feConvolveMatrix_custom_divisor() { assert_eq!(render("tests/filters/feConvolveMatrix/custom-divisor"), 0); }
#[test] fn filters_feConvolveMatrix_divisor_eq_0() { assert_eq!(render("tests/filters/feConvolveMatrix/divisor=0"), 0); }
#[test] fn filters_feConvolveMatrix_edgeMode_eq_none() { assert_eq!(render("tests/filters/feConvolveMatrix/edgeMode=none"), 0); }
#[test] fn filters_feConvolveMatrix_edgeMode_eq_wrap_with_matrix_larger_than_target() { assert_eq!(render("tests/filters/feConvolveMatrix/edgeMode=wrap-with-matrix-larger-than-target"), 0); }
#[test] fn filters_feConvolveMatrix_edgeMode_eq_wrap() { assert_eq!(render("tests/filters/feConvolveMatrix/edgeMode=wrap"), 0); }
#[test] fn filters_feConvolveMatrix_empty_kernelMatrix() { assert_eq!(render("tests/filters/feConvolveMatrix/empty-kernelMatrix"), 0); }
#[test] fn filters_feConvolveMatrix_kernelMatrix_with_not_enough_values() { assert_eq!(render("tests/filters/feConvolveMatrix/kernelMatrix-with-not-enough-values"), 0); }
#[test] fn filters_feConvolveMatrix_kernelMatrix_with_too_many_values() { assert_eq!(render("tests/filters/feConvolveMatrix/kernelMatrix-with-too-many-values"), 0); }
#[test] fn filters_feConvolveMatrix_kernelMatrix_with_zero_sum_and_no_divisor() { assert_eq!(render("tests/filters/feConvolveMatrix/kernelMatrix-with-zero-sum-and-no-divisor"), 0); }
#[test] fn filters_feConvolveMatrix_no_kernelMatrix() { assert_eq!(render("tests/filters/feConvolveMatrix/no-kernelMatrix"), 0); }
#[test] fn filters_feConvolveMatrix_order_with_a_negative_value_1() { assert_eq!(render("tests/filters/feConvolveMatrix/order-with-a-negative-value-1"), 0); }
#[test] fn filters_feConvolveMatrix_order_with_a_negative_value_2() { assert_eq!(render("tests/filters/feConvolveMatrix/order-with-a-negative-value-2"), 0); }
#[test] fn filters_feConvolveMatrix_order_eq_0() { assert_eq!(render("tests/filters/feConvolveMatrix/order=0"), 0); }
#[test] fn filters_feConvolveMatrix_order_eq_4_2() { assert_eq!(render("tests/filters/feConvolveMatrix/order=4-2"), 0); }
#[test] fn filters_feConvolveMatrix_order_eq_4_4() { assert_eq!(render("tests/filters/feConvolveMatrix/order=4-4"), 0); }
#[test] fn filters_feConvolveMatrix_order_eq_4() { assert_eq!(render("tests/filters/feConvolveMatrix/order=4"), 0); }
#[test] fn filters_feConvolveMatrix_preserveAlpha_eq_true() { assert_eq!(render("tests/filters/feConvolveMatrix/preserveAlpha=true"), 0); }
#[test] fn filters_feConvolveMatrix_targetX_eq__1() { assert_eq!(render("tests/filters/feConvolveMatrix/targetX=-1"), 0); }
#[test] fn filters_feConvolveMatrix_targetX_eq_0() { assert_eq!(render("tests/filters/feConvolveMatrix/targetX=0"), 0); }
#[test] fn filters_feConvolveMatrix_targetX_eq_2() { assert_eq!(render("tests/filters/feConvolveMatrix/targetX=2"), 0); }
#[test] fn filters_feConvolveMatrix_targetX_eq_3() { assert_eq!(render("tests/filters/feConvolveMatrix/targetX=3"), 0); }
#[test] fn filters_feConvolveMatrix_unset_order() { assert_eq!(render("tests/filters/feConvolveMatrix/unset-order"), 0); }
#[test] fn filters_feDiffuseLighting_complex_transform() { assert_eq!(render("tests/filters/feDiffuseLighting/complex-transform"), 0); }
#[test] fn filters_feDiffuseLighting_diffuseConstant_eq__1() { assert_eq!(render("tests/filters/feDiffuseLighting/diffuseConstant=-1"), 0); }
#[test] fn filters_feDiffuseLighting_diffuseConstant_eq_0() { assert_eq!(render("tests/filters/feDiffuseLighting/diffuseConstant=0"), 0); }
#[test] fn filters_feDiffuseLighting_diffuseConstant_eq_5() { assert_eq!(render("tests/filters/feDiffuseLighting/diffuseConstant=5"), 0); }
#[test] fn filters_feDiffuseLighting_lighting_color_eq_currentColor_without_color() { assert_eq!(render("tests/filters/feDiffuseLighting/lighting-color=currentColor-without-color"), 0); }
#[test] fn filters_feDiffuseLighting_lighting_color_eq_currentColor() { assert_eq!(render("tests/filters/feDiffuseLighting/lighting-color=currentColor"), 0); }
#[test] fn filters_feDiffuseLighting_lighting_color_eq_hsla() { assert_eq!(render("tests/filters/feDiffuseLighting/lighting-color=hsla"), 0); }
#[test] fn filters_feDiffuseLighting_lighting_color_eq_inherit() { assert_eq!(render("tests/filters/feDiffuseLighting/lighting-color=inherit"), 0); }
#[test] fn filters_feDiffuseLighting_lighting_color_eq_seagreen() { assert_eq!(render("tests/filters/feDiffuseLighting/lighting-color=seagreen"), 0); }
#[test] fn filters_feDiffuseLighting_linearRGB_color_interpolation() { assert_eq!(render("tests/filters/feDiffuseLighting/linearRGB-color-interpolation"), 0); }
#[test] fn filters_feDiffuseLighting_multiple_light_sources() { assert_eq!(render("tests/filters/feDiffuseLighting/multiple-light-sources"), 0); }
#[test] fn filters_feDiffuseLighting_no_light_source() { assert_eq!(render("tests/filters/feDiffuseLighting/no-light-source"), 0); }
#[test] fn filters_feDiffuseLighting_single_light_source_with_comment() { assert_eq!(render("tests/filters/feDiffuseLighting/single-light-source-with-comment"), 0); }
#[test] fn filters_feDiffuseLighting_single_light_source_with_desc() { assert_eq!(render("tests/filters/feDiffuseLighting/single-light-source-with-desc"), 0); }
#[test] fn filters_feDiffuseLighting_single_light_source_with_invalid_child() { assert_eq!(render("tests/filters/feDiffuseLighting/single-light-source-with-invalid-child"), 0); }
#[test] fn filters_feDiffuseLighting_single_light_source_with_title_and_desc() { assert_eq!(render("tests/filters/feDiffuseLighting/single-light-source-with-title-and-desc"), 0); }
#[test] fn filters_feDiffuseLighting_single_light_source_with_title() { assert_eq!(render("tests/filters/feDiffuseLighting/single-light-source-with-title"), 0); }
#[test] fn filters_feDiffuseLighting_single_light_source() { assert_eq!(render("tests/filters/feDiffuseLighting/single-light-source"), 0); }
#[test] fn filters_feDiffuseLighting_surfaceScale_eq__10() { assert_eq!(render("tests/filters/feDiffuseLighting/surfaceScale=-10"), 0); }
#[test] fn filters_feDiffuseLighting_surfaceScale_eq_0() { assert_eq!(render("tests/filters/feDiffuseLighting/surfaceScale=0"), 0); }
#[test] fn filters_feDiffuseLighting_surfaceScale_eq_1_33() { assert_eq!(render("tests/filters/feDiffuseLighting/surfaceScale=1.33"), 0); }
#[test] fn filters_feDiffuseLighting_surfaceScale_eq_5() { assert_eq!(render("tests/filters/feDiffuseLighting/surfaceScale=5"), 0); }
#[test] fn filters_feDisplacementMap_simple_case() { assert_eq!(render("tests/filters/feDisplacementMap/simple-case"), 0); }
#[test] fn filters_feDistantLight_default_attributes() { assert_eq!(render("tests/filters/feDistantLight/default-attributes"), 0); }
#[test] fn filters_feDistantLight_negative_azimuth_and_elevation() { assert_eq!(render("tests/filters/feDistantLight/negative-azimuth-and-elevation"), 0); }
#[test] fn filters_feDistantLight_only_azimuth() { assert_eq!(render("tests/filters/feDistantLight/only-azimuth"), 0); }
#[test] fn filters_feDistantLight_only_elevation() { assert_eq!(render("tests/filters/feDistantLight/only-elevation"), 0); }
#[test] fn filters_feDropShadow_hsla_color() { assert_eq!(render("tests/filters/feDropShadow/hsla-color"), 0); }
#[test] fn filters_feDropShadow_only_stdDeviation() { assert_eq!(render("tests/filters/feDropShadow/only-stdDeviation"), 0); }
#[test] fn filters_feDropShadow_stdDeviation_eq_0() { assert_eq!(render("tests/filters/feDropShadow/stdDeviation=0"), 0); }
#[test] fn filters_feDropShadow_with_flood_color() { assert_eq!(render("tests/filters/feDropShadow/with-flood-color"), 0); }
#[test] fn filters_feDropShadow_with_flood_opacity() { assert_eq!(render("tests/filters/feDropShadow/with-flood-opacity"), 0); }
#[test] fn filters_feDropShadow_with_offset_clipped() { assert_eq!(render("tests/filters/feDropShadow/with-offset-clipped"), 0); }
#[test] fn filters_feDropShadow_with_offset() { assert_eq!(render("tests/filters/feDropShadow/with-offset"), 0); }
#[test] fn filters_feDropShadow_with_percent_offset() { assert_eq!(render("tests/filters/feDropShadow/with-percent-offset"), 0); }
#[test] fn filters_feFlood_complex_transform() { assert_eq!(render("tests/filters/feFlood/complex-transform"), 0); }
#[test] fn filters_feFlood_default_values() { assert_eq!(render("tests/filters/feFlood/default-values"), 0); }
#[test] fn filters_feFlood_partial_subregion() { assert_eq!(render("tests/filters/feFlood/partial-subregion"), 0); }
#[test] fn filters_feFlood_seagreen() { assert_eq!(render("tests/filters/feFlood/seagreen"), 0); }
#[test] fn filters_feFlood_subregion_inheritance() { assert_eq!(render("tests/filters/feFlood/subregion-inheritance"), 0); }
#[test] fn filters_feFlood_subregion_with_primitiveUnits_eq_objectBoundingBox() { assert_eq!(render("tests/filters/feFlood/subregion-with-primitiveUnits=objectBoundingBox"), 0); }
#[test] fn filters_feFlood_with_opacity_on_target_element() { assert_eq!(render("tests/filters/feFlood/with-opacity-on-target-element"), 0); }
#[test] fn filters_feFlood_with_opacity() { assert_eq!(render("tests/filters/feFlood/with-opacity"), 0); }
#[test] fn filters_feGaussianBlur_complex_transform() { assert_eq!(render("tests/filters/feGaussianBlur/complex-transform"), 0); }
#[test] fn filters_feGaussianBlur_empty_stdDeviation() { assert_eq!(render("tests/filters/feGaussianBlur/empty-stdDeviation"), 0); }
#[test] fn filters_feGaussianBlur_huge_stdDeviation() { assert_eq!(render("tests/filters/feGaussianBlur/huge-stdDeviation"), 0); }
#[test] fn filters_feGaussianBlur_negative_stdDeviation() { assert_eq!(render("tests/filters/feGaussianBlur/negative-stdDeviation"), 0); }
#[test] fn filters_feGaussianBlur_no_stdDeviation() { assert_eq!(render("tests/filters/feGaussianBlur/no-stdDeviation"), 0); }
#[test] fn filters_feGaussianBlur_simple_case() { assert_eq!(render("tests/filters/feGaussianBlur/simple-case"), 0); }
#[test] fn filters_feGaussianBlur_small_stdDeviation() { assert_eq!(render("tests/filters/feGaussianBlur/small-stdDeviation"), 0); }
#[test] fn filters_feGaussianBlur_stdDeviation_with_multiple_values() { assert_eq!(render("tests/filters/feGaussianBlur/stdDeviation-with-multiple-values"), 0); }
#[test] fn filters_feGaussianBlur_stdDeviation_with_two_different_values() { assert_eq!(render("tests/filters/feGaussianBlur/stdDeviation-with-two-different-values"), 0); }
#[test] fn filters_feGaussianBlur_stdDeviation_with_two_values() { assert_eq!(render("tests/filters/feGaussianBlur/stdDeviation-with-two-values"), 0); }
#[test] fn filters_feGaussianBlur_stdDeviation_eq_0_5() { assert_eq!(render("tests/filters/feGaussianBlur/stdDeviation=0-5"), 0); }
#[test] fn filters_feGaussianBlur_stdDeviation_eq_5_0() { assert_eq!(render("tests/filters/feGaussianBlur/stdDeviation=5-0"), 0); }
#[test] fn filters_feGaussianBlur_tiny_stdDeviation() { assert_eq!(render("tests/filters/feGaussianBlur/tiny-stdDeviation"), 0); }
#[test] fn filters_feImage_chained_feImage() { assert_eq!(render("tests/filters/feImage/chained-feImage"), 0); }
#[test] fn filters_feImage_embedded_png() { assert_eq!(render("tests/filters/feImage/embedded-png"), 0); }
#[test] fn filters_feImage_empty() { assert_eq!(render("tests/filters/feImage/empty"), 0); }
#[test] fn filters_feImage_link_on_an_element_with_complex_transform() { assert_eq!(render("tests/filters/feImage/link-on-an-element-with-complex-transform"), 0); }
#[test] fn filters_feImage_link_on_an_element_with_transform() { assert_eq!(render("tests/filters/feImage/link-on-an-element-with-transform"), 0); }
#[test] fn filters_feImage_link_to_an_element_outside_defs_1() { assert_eq!(render("tests/filters/feImage/link-to-an-element-outside-defs-1"), 0); }
#[test] fn filters_feImage_link_to_an_element_outside_defs_2() { assert_eq!(render("tests/filters/feImage/link-to-an-element-outside-defs-2"), 0); }
#[test] fn filters_feImage_link_to_an_element_with_opacity() { assert_eq!(render("tests/filters/feImage/link-to-an-element-with-opacity"), 0); }
#[test] fn filters_feImage_link_to_an_element_with_transform() { assert_eq!(render("tests/filters/feImage/link-to-an-element-with-transform"), 0); }
#[test] fn filters_feImage_link_to_an_element() { assert_eq!(render("tests/filters/feImage/link-to-an-element"), 0); }
#[test] fn filters_feImage_link_to_an_invalid_element() { assert_eq!(render("tests/filters/feImage/link-to-an-invalid-element"), 0); }
#[test] fn filters_feImage_link_to_g() { assert_eq!(render("tests/filters/feImage/link-to-g"), 0); }
#[test] fn filters_feImage_link_to_use() { assert_eq!(render("tests/filters/feImage/link-to-use"), 0); }
#[test] fn filters_feImage_preserveAspectRatio_eq_none() { assert_eq!(render("tests/filters/feImage/preserveAspectRatio=none"), 0); }
#[test] fn filters_feImage_recursive_links_1() { assert_eq!(render("tests/filters/feImage/recursive-links-1"), 0); }
#[test] fn filters_feImage_recursive_links_2() { assert_eq!(render("tests/filters/feImage/recursive-links-2"), 0); }
#[test] fn filters_feImage_self_recursive() { assert_eq!(render("tests/filters/feImage/self-recursive"), 0); }
#[test] fn filters_feImage_simple_case() { assert_eq!(render("tests/filters/feImage/simple-case"), 0); }
#[test] fn filters_feImage_svg() { assert_eq!(render("tests/filters/feImage/svg"), 0); }
#[test] fn filters_feImage_with_subregion_1() { assert_eq!(render("tests/filters/feImage/with-subregion-1"), 0); }
#[test] fn filters_feImage_with_subregion_2() { assert_eq!(render("tests/filters/feImage/with-subregion-2"), 0); }
#[test] fn filters_feImage_with_subregion_3() { assert_eq!(render("tests/filters/feImage/with-subregion-3"), 0); }
#[test] fn filters_feImage_with_subregion_4() { assert_eq!(render("tests/filters/feImage/with-subregion-4"), 0); }
#[test] fn filters_feImage_with_subregion_5() { assert_eq!(render("tests/filters/feImage/with-subregion-5"), 0); }
#[test] fn filters_feMerge_color_interpolation_filters_eq_linearRGB() { assert_eq!(render("tests/filters/feMerge/color-interpolation-filters=linearRGB"), 0); }
#[test] fn filters_feMerge_color_interpolation_filters_eq_sRGB() { assert_eq!(render("tests/filters/feMerge/color-interpolation-filters=sRGB"), 0); }
#[test] fn filters_feMerge_complex_transform() { assert_eq!(render("tests/filters/feMerge/complex-transform"), 0); }
#[test] fn filters_feMorphology_empty_radius() { assert_eq!(render("tests/filters/feMorphology/empty-radius"), 0); }
#[test] fn filters_feMorphology_negative_radius() { assert_eq!(render("tests/filters/feMorphology/negative-radius"), 0); }
#[test] fn filters_feMorphology_no_radius() { assert_eq!(render("tests/filters/feMorphology/no-radius"), 0); }
#[test] fn filters_feMorphology_operator_eq_dilate() { assert_eq!(render("tests/filters/feMorphology/operator=dilate"), 0); }
#[test] fn filters_feMorphology_radius_with_too_many_values() { assert_eq!(render("tests/filters/feMorphology/radius-with-too-many-values"), 0); }
#[test] fn filters_feMorphology_radius_eq_0_5_with_objectBoundingBox() { assert_eq!(render("tests/filters/feMorphology/radius=0.5-with-objectBoundingBox"), 0); }
#[test] fn filters_feMorphology_radius_eq_0_5() { assert_eq!(render("tests/filters/feMorphology/radius=0.5"), 0); }
#[test] fn filters_feMorphology_radius_eq_1_10() { assert_eq!(render("tests/filters/feMorphology/radius=1-10"), 0); }
#[test] fn filters_feMorphology_radius_eq_10_0() { assert_eq!(render("tests/filters/feMorphology/radius=10-0"), 0); }
#[test] fn filters_feMorphology_radius_eq_10_1() { assert_eq!(render("tests/filters/feMorphology/radius=10-1"), 0); }
#[test] fn filters_feMorphology_simple_case() { assert_eq!(render("tests/filters/feMorphology/simple-case"), 0); }
#[test] fn filters_feMorphology_source_with_opacity() { assert_eq!(render("tests/filters/feMorphology/source-with-opacity"), 0); }
#[test] fn filters_feMorphology_zero_radius() { assert_eq!(render("tests/filters/feMorphology/zero-radius"), 0); }
#[test] fn filters_feOffset_complex_transform() { assert_eq!(render("tests/filters/feOffset/complex-transform"), 0); }
#[test] fn filters_feOffset_fractional_offset() { assert_eq!(render("tests/filters/feOffset/fractional-offset"), 0); }
#[test] fn filters_feOffset_negative_offset() { assert_eq!(render("tests/filters/feOffset/negative-offset"), 0); }
#[test] fn filters_feOffset_no_offset() { assert_eq!(render("tests/filters/feOffset/no-offset"), 0); }
#[test] fn filters_feOffset_only_dx() { assert_eq!(render("tests/filters/feOffset/only-dx"), 0); }
#[test] fn filters_feOffset_only_dy() { assert_eq!(render("tests/filters/feOffset/only-dy"), 0); }
#[test] fn filters_feOffset_percentage_values() { assert_eq!(render("tests/filters/feOffset/percentage-values"), 0); }
#[test] fn filters_feOffset_simple_case() { assert_eq!(render("tests/filters/feOffset/simple-case"), 0); }
#[test] fn filters_feOffset_with_primitiveUnits_eq_objectBoundingBox() { assert_eq!(render("tests/filters/feOffset/with-primitiveUnits=objectBoundingBox"), 0); }
#[test] fn filters_fePointLight_complex_transform() { assert_eq!(render("tests/filters/fePointLight/complex-transform"), 0); }
#[test] fn filters_fePointLight_custom_attributes() { assert_eq!(render("tests/filters/fePointLight/custom-attributes"), 0); }
#[test] fn filters_fePointLight_default_attributes() { assert_eq!(render("tests/filters/fePointLight/default-attributes"), 0); }
#[test] fn filters_fePointLight_primitiveUnits_eq_objectBoundingBox() { assert_eq!(render("tests/filters/fePointLight/primitiveUnits=objectBoundingBox"), 0); }
#[test] fn filters_feSpecularLighting_lighting_color_eq_hsla() { assert_eq!(render("tests/filters/feSpecularLighting/lighting-color=hsla"), 0); }
#[test] fn filters_feSpecularLighting_specularExponent_eq_0() { assert_eq!(render("tests/filters/feSpecularLighting/specularExponent=0"), 0); }
#[test] fn filters_feSpecularLighting_specularExponent_eq_256() { assert_eq!(render("tests/filters/feSpecularLighting/specularExponent=256"), 0); }
#[test] fn filters_feSpecularLighting_with_feDistantLight() { assert_eq!(render("tests/filters/feSpecularLighting/with-feDistantLight"), 0); }
#[test] fn filters_feSpecularLighting_with_fePointLight() { assert_eq!(render("tests/filters/feSpecularLighting/with-fePointLight"), 0); }
#[test] fn filters_feSpecularLighting_with_feSpotLight_and_specular_and_exponent() { assert_eq!(render("tests/filters/feSpecularLighting/with-feSpotLight-and-specular-and-exponent"), 0); }
#[test] fn filters_feSpecularLighting_with_feSpotLight_and_specularConstant_eq_5() { assert_eq!(render("tests/filters/feSpecularLighting/with-feSpotLight-and-specularConstant=5"), 0); }
#[test] fn filters_feSpecularLighting_with_feSpotLight() { assert_eq!(render("tests/filters/feSpecularLighting/with-feSpotLight"), 0); }
#[test] fn filters_feSpotLight_complex_transform() { assert_eq!(render("tests/filters/feSpotLight/complex-transform"), 0); }
#[test] fn filters_feSpotLight_custom_attributes() { assert_eq!(render("tests/filters/feSpotLight/custom-attributes"), 0); }
#[test] fn filters_feSpotLight_default_attributes() { assert_eq!(render("tests/filters/feSpotLight/default-attributes"), 0); }
#[test] fn filters_feSpotLight_limitingConeAngle_anti_aliasing() { assert_eq!(render("tests/filters/feSpotLight/limitingConeAngle-anti-aliasing"), 0); }
#[test] fn filters_feSpotLight_limitingConeAngle_eq__30() { assert_eq!(render("tests/filters/feSpotLight/limitingConeAngle=-30"), 0); }
#[test] fn filters_feSpotLight_limitingConeAngle_eq_0() { assert_eq!(render("tests/filters/feSpotLight/limitingConeAngle=0"), 0); }
#[test] fn filters_feSpotLight_limitingConeAngle_eq_30() { assert_eq!(render("tests/filters/feSpotLight/limitingConeAngle=30"), 0); }
#[test] fn filters_feSpotLight_primitiveUnits_eq_objectBoundingBox() { assert_eq!(render("tests/filters/feSpotLight/primitiveUnits=objectBoundingBox"), 0); }
#[test] fn filters_feSpotLight_specularExponent_eq__10() { assert_eq!(render("tests/filters/feSpotLight/specularExponent=-10"), 0); }
#[test] fn filters_feSpotLight_specularExponent_eq_0_5() { assert_eq!(render("tests/filters/feSpotLight/specularExponent=0.5"), 0); }
#[test] fn filters_feSpotLight_specularExponent_eq_10() { assert_eq!(render("tests/filters/feSpotLight/specularExponent=10"), 0); }
#[test] fn filters_feSpotLight_with_all_pointsAt() { assert_eq!(render("tests/filters/feSpotLight/with-all-pointsAt"), 0); }
#[test] fn filters_feTile_complex_transform() { assert_eq!(render("tests/filters/feTile/complex-transform"), 0); }
#[test] fn filters_feTile_empty_region() { assert_eq!(render("tests/filters/feTile/empty-region"), 0); }
#[test] fn filters_feTile_simple_case() { assert_eq!(render("tests/filters/feTile/simple-case"), 0); }
#[test] fn filters_feTile_with_region() { assert_eq!(render("tests/filters/feTile/with-region"), 0); }
#[test] fn filters_feTile_with_subregion_1() { assert_eq!(render("tests/filters/feTile/with-subregion-1"), 0); }
#[test] fn filters_feTile_with_subregion_2() { assert_eq!(render("tests/filters/feTile/with-subregion-2"), 0); }
#[test] fn filters_feTile_with_subregion_3() { assert_eq!(render("tests/filters/feTile/with-subregion-3"), 0); }
#[test] fn filters_feTurbulence_baseFrequency_eq__0_05() { assert_eq!(render("tests/filters/feTurbulence/baseFrequency=-0.05"), 0); }
#[test] fn filters_feTurbulence_baseFrequency_eq_0_01() { assert_eq!(render("tests/filters/feTurbulence/baseFrequency=0.01"), 0); }
#[test] fn filters_feTurbulence_baseFrequency_eq_0_05__0_01() { assert_eq!(render("tests/filters/feTurbulence/baseFrequency=0.05--0.01"), 0); }
#[test] fn filters_feTurbulence_baseFrequency_eq_0_05_0_01() { assert_eq!(render("tests/filters/feTurbulence/baseFrequency=0.05-0.01"), 0); }
#[test] fn filters_feTurbulence_baseFrequency_eq_0_05_0_05() { assert_eq!(render("tests/filters/feTurbulence/baseFrequency=0.05-0.05"), 0); }
#[test] fn filters_feTurbulence_baseFrequency_eq_0_05_0() { assert_eq!(render("tests/filters/feTurbulence/baseFrequency=0.05-0"), 0); }
#[test] fn filters_feTurbulence_color_interpolation_filters_eq_sRGB() { assert_eq!(render("tests/filters/feTurbulence/color-interpolation-filters=sRGB"), 0); }
#[test] fn filters_feTurbulence_complex_transform() { assert_eq!(render("tests/filters/feTurbulence/complex-transform"), 0); }
#[test] fn filters_feTurbulence_no_attributes() { assert_eq!(render("tests/filters/feTurbulence/no-attributes"), 0); }
#[test] fn filters_feTurbulence_numOctaves_eq__1() { assert_eq!(render("tests/filters/feTurbulence/numOctaves=-1"), 0); }
#[test] fn filters_feTurbulence_numOctaves_eq_0() { assert_eq!(render("tests/filters/feTurbulence/numOctaves=0"), 0); }
#[test] fn filters_feTurbulence_numOctaves_eq_5() { assert_eq!(render("tests/filters/feTurbulence/numOctaves=5"), 0); }
#[test] fn filters_feTurbulence_primitiveUnits_eq_objectBoundingBox() { assert_eq!(render("tests/filters/feTurbulence/primitiveUnits=objectBoundingBox"), 0); }
#[test] fn filters_feTurbulence_seed_eq__20() { assert_eq!(render("tests/filters/feTurbulence/seed=-20"), 0); }
#[test] fn filters_feTurbulence_seed_eq_1_5() { assert_eq!(render("tests/filters/feTurbulence/seed=1.5"), 0); }
#[test] fn filters_feTurbulence_seed_eq_20() { assert_eq!(render("tests/filters/feTurbulence/seed=20"), 0); }
#[test] fn filters_feTurbulence_stitchTiles_eq_stitch() { assert_eq!(render("tests/filters/feTurbulence/stitchTiles=stitch"), 0); }
#[test] fn filters_feTurbulence_type_eq_fractalNoise() { assert_eq!(render("tests/filters/feTurbulence/type=fractalNoise"), 0); }
#[test] fn filters_feTurbulence_type_eq_invalid() { assert_eq!(render("tests/filters/feTurbulence/type=invalid"), 0); }
#[test] fn filters_filter_color_interpolation_filters_eq_sRGB() { assert_eq!(render("tests/filters/filter/color-interpolation-filters=sRGB"), 0); }
#[test] fn filters_filter_complex_order_and_xlink_href() { assert_eq!(render("tests/filters/filter/complex-order-and-xlink-href"), 0); }
#[test] fn filters_filter_content_outside_the_canvas_2() { assert_eq!(render("tests/filters/filter/content-outside-the-canvas-2"), 0); }
#[test] fn filters_filter_content_outside_the_canvas() { assert_eq!(render("tests/filters/filter/content-outside-the-canvas"), 0); }
#[test] fn filters_filter_default_color_interpolation_filters() { assert_eq!(render("tests/filters/filter/default-color-interpolation-filters"), 0); }
#[test] fn filters_filter_everything_via_xlink_href() { assert_eq!(render("tests/filters/filter/everything-via-xlink-href"), 0); }
#[test] fn filters_filter_global_transform() { assert_eq!(render("tests/filters/filter/global-transform"), 0); }
#[test] fn filters_filter_huge_region() { assert_eq!(render("tests/filters/filter/huge-region"), 0); }
#[test] fn filters_filter_in_to_invalid_1() { assert_eq!(render("tests/filters/filter/in-to-invalid-1"), 0); }
#[test] fn filters_filter_in_to_invalid_2() { assert_eq!(render("tests/filters/filter/in-to-invalid-2"), 0); }
#[test] fn filters_filter_in_eq_BackgroundAlpha_with_enable_background() { assert_eq!(render("tests/filters/filter/in=BackgroundAlpha-with-enable-background"), 0); }
#[test] fn filters_filter_in_eq_BackgroundAlpha() { assert_eq!(render("tests/filters/filter/in=BackgroundAlpha"), 0); }
#[test] fn filters_filter_in_eq_BackgroundImage_with_enable_background() { assert_eq!(render("tests/filters/filter/in=BackgroundImage-with-enable-background"), 0); }
#[test] fn filters_filter_in_eq_BackgroundImage() { assert_eq!(render("tests/filters/filter/in=BackgroundImage"), 0); }
#[test] fn filters_filter_in_eq_FillPaint_on_g_without_children() { assert_eq!(render("tests/filters/filter/in=FillPaint-on-g-without-children"), 0); }
#[test] fn filters_filter_in_eq_FillPaint_with_gradient() { assert_eq!(render("tests/filters/filter/in=FillPaint-with-gradient"), 0); }
#[test] fn filters_filter_in_eq_FillPaint_with_pattern() { assert_eq!(render("tests/filters/filter/in=FillPaint-with-pattern"), 0); }
#[test] fn filters_filter_in_eq_FillPaint_with_target_on_g() { assert_eq!(render("tests/filters/filter/in=FillPaint-with-target-on-g"), 0); }
#[test] fn filters_filter_in_eq_FillPaint() { assert_eq!(render("tests/filters/filter/in=FillPaint"), 0); }
#[test] fn filters_filter_in_eq_SourceAlpha() { assert_eq!(render("tests/filters/filter/in=SourceAlpha"), 0); }
#[test] fn filters_filter_in_eq_StrokePaint() { assert_eq!(render("tests/filters/filter/in=StrokePaint"), 0); }
#[test] fn filters_filter_initial_transform() { assert_eq!(render("tests/filters/filter/initial-transform"), 0); }
#[test] fn filters_filter_invalid_FuncIRI() { assert_eq!(render("tests/filters/filter/invalid-FuncIRI"), 0); }
#[test] fn filters_filter_invalid_filterUnits() { assert_eq!(render("tests/filters/filter/invalid-filterUnits"), 0); }
#[test] fn filters_filter_invalid_primitive_1() { assert_eq!(render("tests/filters/filter/invalid-primitive-1"), 0); }
#[test] fn filters_filter_invalid_primitive_2() { assert_eq!(render("tests/filters/filter/invalid-primitive-2"), 0); }
#[test] fn filters_filter_invalid_region() { assert_eq!(render("tests/filters/filter/invalid-region"), 0); }
#[test] fn filters_filter_invalid_subregion() { assert_eq!(render("tests/filters/filter/invalid-subregion"), 0); }
#[test] fn filters_filter_invalid_xlink_href() { assert_eq!(render("tests/filters/filter/invalid-xlink-href"), 0); }
#[test] fn filters_filter_multiple_primitives_1() { assert_eq!(render("tests/filters/filter/multiple-primitives-1"), 0); }
#[test] fn filters_filter_multiple_primitives_2() { assert_eq!(render("tests/filters/filter/multiple-primitives-2"), 0); }
#[test] fn filters_filter_multiple_primitives_3() { assert_eq!(render("tests/filters/filter/multiple-primitives-3"), 0); }
#[test] fn filters_filter_multiple_primitives_4() { assert_eq!(render("tests/filters/filter/multiple-primitives-4"), 0); }
#[test] fn filters_filter_negative_subregion() { assert_eq!(render("tests/filters/filter/negative-subregion"), 0); }
#[test] fn filters_filter_no_children() { assert_eq!(render("tests/filters/filter/no-children"), 0); }
#[test] fn filters_filter_none() { assert_eq!(render("tests/filters/filter/none"), 0); }
#[test] fn filters_filter_on_a_thin_rect() { assert_eq!(render("tests/filters/filter/on-a-thin-rect"), 0); }
#[test] fn filters_filter_on_a_vertical_line() { assert_eq!(render("tests/filters/filter/on-a-vertical-line"), 0); }
#[test] fn filters_filter_on_an_empty_group_1() { assert_eq!(render("tests/filters/filter/on-an-empty-group-1"), 0); }
#[test] fn filters_filter_on_an_empty_group_2() { assert_eq!(render("tests/filters/filter/on-an-empty-group-2"), 0); }
#[test] fn filters_filter_on_the_root_svg() { assert_eq!(render("tests/filters/filter/on-the-root-svg"), 0); }
#[test] fn filters_filter_on_zero_sized_shape() { assert_eq!(render("tests/filters/filter/on-zero-sized-shape"), 0); }
#[test] fn filters_filter_primitiveUnits_eq_objectBoundingBox() { assert_eq!(render("tests/filters/filter/primitiveUnits=objectBoundingBox"), 0); }
#[test] fn filters_filter_recursive_xlink_href() { assert_eq!(render("tests/filters/filter/recursive-xlink-href"), 0); }
#[test] fn filters_filter_region_with_stroke() { assert_eq!(render("tests/filters/filter/region-with-stroke"), 0); }
#[test] fn filters_filter_self_recursive_xlink_href() { assert_eq!(render("tests/filters/filter/self-recursive-xlink-href"), 0); }
#[test] fn filters_filter_simple_case() { assert_eq!(render("tests/filters/filter/simple-case"), 0); }
#[test] fn filters_filter_some_attributes_via_xlink_href() { assert_eq!(render("tests/filters/filter/some-attributes-via-xlink-href"), 0); }
#[test] fn filters_filter_subregion_and_primitiveUnits_eq_objectBoundingBox_1() { assert_eq!(render("tests/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-1"), 0); }
#[test] fn filters_filter_subregion_and_primitiveUnits_eq_objectBoundingBox_2() { assert_eq!(render("tests/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-2"), 0); }
#[test] fn filters_filter_subregion_bigger_that_region() { assert_eq!(render("tests/filters/filter/subregion-bigger-that-region"), 0); }
#[test] fn filters_filter_transform_on_filter() { assert_eq!(render("tests/filters/filter/transform-on-filter"), 0); }
#[test] fn filters_filter_transform_on_shape_with_filter_region() { assert_eq!(render("tests/filters/filter/transform-on-shape-with-filter-region"), 0); }
#[test] fn filters_filter_transform_on_shape() { assert_eq!(render("tests/filters/filter/transform-on-shape"), 0); }
#[test] fn filters_filter_unresolved_xlink_href() { assert_eq!(render("tests/filters/filter/unresolved-xlink-href"), 0); }
#[test] fn filters_filter_with_clip_path_and_mask() { assert_eq!(render("tests/filters/filter/with-clip-path-and-mask"), 0); }
#[test] fn filters_filter_with_clip_path() { assert_eq!(render("tests/filters/filter/with-clip-path"), 0); }
#[test] fn filters_filter_with_mask_on_parent() { assert_eq!(render("tests/filters/filter/with-mask-on-parent"), 0); }
#[test] fn filters_filter_with_mask() { assert_eq!(render("tests/filters/filter/with-mask"), 0); }
#[test] fn filters_filter_with_multiple_transforms_1() { assert_eq!(render("tests/filters/filter/with-multiple-transforms-1"), 0); }
#[test] fn filters_filter_with_multiple_transforms_2() { assert_eq!(render("tests/filters/filter/with-multiple-transforms-2"), 0); }
#[test] fn filters_filter_with_region_and_filterUnits_eq_userSpaceOnUse() { assert_eq!(render("tests/filters/filter/with-region-and-filterUnits=userSpaceOnUse"), 0); }
#[test] fn filters_filter_with_region_and_subregion() { assert_eq!(render("tests/filters/filter/with-region-and-subregion"), 0); }
#[test] fn filters_filter_with_region_outside_the_canvas() { assert_eq!(render("tests/filters/filter/with-region-outside-the-canvas"), 0); }
#[test] fn filters_filter_with_region_outside_the_viewbox() { assert_eq!(render("tests/filters/filter/with-region-outside-the-viewbox"), 0); }
#[test] fn filters_filter_with_region() { assert_eq!(render("tests/filters/filter/with-region"), 0); }
#[test] fn filters_filter_with_subregion_1() { assert_eq!(render("tests/filters/filter/with-subregion-1"), 0); }
#[test] fn filters_filter_with_subregion_2() { assert_eq!(render("tests/filters/filter/with-subregion-2"), 0); }
#[test] fn filters_filter_with_subregion_3() { assert_eq!(render("tests/filters/filter/with-subregion-3"), 0); }
#[test] fn filters_filter_without_region_and_filterUnits_eq_userSpaceOnUse() { assert_eq!(render("tests/filters/filter/without-region-and-filterUnits=userSpaceOnUse"), 0); }
#[test] fn filters_filter_zero_sized_subregion() { assert_eq!(render("tests/filters/filter/zero-sized-subregion"), 0); }
#[test] fn filters_filter_functions_blur_function_mm_value() { assert_eq!(render("tests/filters/filter-functions/blur-function-mm-value"), 0); }
#[test] fn filters_filter_functions_blur_function_negative_value() { assert_eq!(render("tests/filters/filter-functions/blur-function-negative-value"), 0); }
#[test] fn filters_filter_functions_blur_function_no_values() { assert_eq!(render("tests/filters/filter-functions/blur-function-no-values"), 0); }
#[test] fn filters_filter_functions_blur_function_percent_value() { assert_eq!(render("tests/filters/filter-functions/blur-function-percent-value"), 0); }
#[test] fn filters_filter_functions_blur_function_two_values() { assert_eq!(render("tests/filters/filter-functions/blur-function-two-values"), 0); }
#[test] fn filters_filter_functions_blur_function() { assert_eq!(render("tests/filters/filter-functions/blur-function"), 0); }
#[test] fn filters_filter_functions_color_adjust_functions_0percent() { assert_eq!(render("tests/filters/filter-functions/color-adjust-functions-0percent"), 0); }
#[test] fn filters_filter_functions_color_adjust_functions_100percent() { assert_eq!(render("tests/filters/filter-functions/color-adjust-functions-100percent"), 0); }
#[test] fn filters_filter_functions_color_adjust_functions_2() { assert_eq!(render("tests/filters/filter-functions/color-adjust-functions-2"), 0); }
#[test] fn filters_filter_functions_color_adjust_functions_200percent() { assert_eq!(render("tests/filters/filter-functions/color-adjust-functions-200percent"), 0); }
#[test] fn filters_filter_functions_color_adjust_functions_50percent() { assert_eq!(render("tests/filters/filter-functions/color-adjust-functions-50percent"), 0); }
#[test] fn filters_filter_functions_color_adjust_functions_default_value() { assert_eq!(render("tests/filters/filter-functions/color-adjust-functions-default-value"), 0); }
#[test] fn filters_filter_functions_color_adjust_functions_negative() { assert_eq!(render("tests/filters/filter-functions/color-adjust-functions-negative"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_color_as_attribute() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-color-as-attribute"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_color_last() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-color-last"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_comma_spearated() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-comma-spearated"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_currentColor() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-currentColor"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_em_values() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-em-values"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_extra_value() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-extra-value"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_filter_region() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-filter-region"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_mm_values() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-mm-values"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_no_color() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-no-color"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_no_values() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-no-values"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_only_X_offset() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-only-X-offset"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_only_offset() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-only-offset"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function_percent_values() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function-percent-values"), 0); }
#[test] fn filters_filter_functions_drop_shadow_function() { assert_eq!(render("tests/filters/filter-functions/drop-shadow-function"), 0); }
#[test] fn filters_filter_functions_grayscale_and_opacity() { assert_eq!(render("tests/filters/filter-functions/grayscale-and-opacity"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_0_25turn() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-0.25turn"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_45() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-45"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_45deg() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-45deg"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_45grad() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-45grad"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_45rad() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-45rad"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_999deg() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-999deg"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_default_value() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-default-value"), 0); }
#[test] fn filters_filter_functions_hue_rotate_function_zero() { assert_eq!(render("tests/filters/filter-functions/hue-rotate-function-zero"), 0); }
#[test] fn filters_filter_functions_nested_filters() { assert_eq!(render("tests/filters/filter-functions/nested-filters"), 0); }
#[test] fn filters_filter_functions_one_invalid_function_in_list() { assert_eq!(render("tests/filters/filter-functions/one-invalid-function-in-list"), 0); }
#[test] fn filters_filter_functions_one_invalid_url_in_list() { assert_eq!(render("tests/filters/filter-functions/one-invalid-url-in-list"), 0); }
#[test] fn filters_filter_functions_two_drop_shadow_function() { assert_eq!(render("tests/filters/filter-functions/two-drop-shadow-function"), 0); }
#[test] fn filters_filter_functions_two_exact_urls() { assert_eq!(render("tests/filters/filter-functions/two-exact-urls"), 0); }
#[test] fn filters_filter_functions_two_urls() { assert_eq!(render("tests/filters/filter-functions/two-urls"), 0); }
#[test] fn filters_filter_functions_url_and_grayscale() { assert_eq!(render("tests/filters/filter-functions/url-and-grayscale"), 0); }
#[test] fn filters_flood_color_hsla_color() { assert_eq!(render("tests/filters/flood-color/hsla-color"), 0); }
#[test] fn filters_flood_color_inheritance_1() { assert_eq!(render("tests/filters/flood-color/inheritance-1"), 0); }
#[test] fn filters_flood_color_inheritance_2() { assert_eq!(render("tests/filters/flood-color/inheritance-2"), 0); }
#[test] fn filters_flood_color_inheritance_3() { assert_eq!(render("tests/filters/flood-color/inheritance-3"), 0); }
#[test] fn filters_flood_color_inheritance_4() { assert_eq!(render("tests/filters/flood-color/inheritance-4"), 0); }
#[test] fn filters_flood_color_inheritance_5() { assert_eq!(render("tests/filters/flood-color/inheritance-5"), 0); }
#[test] fn filters_flood_color_simple_case() { assert_eq!(render("tests/filters/flood-color/simple-case"), 0); }
#[test] fn filters_flood_opacity_50percent() { assert_eq!(render("tests/filters/flood-opacity/50percent"), 0); }
#[test] fn filters_flood_opacity_simple_case() { assert_eq!(render("tests/filters/flood-opacity/simple-case"), 0); }
#[test] fn masking_clip_simple_case() { assert_eq!(render("tests/masking/clip/simple-case"), 0); }
#[test] fn masking_clip_rule_clip_rule_eq_evenodd() { assert_eq!(render("tests/masking/clip-rule/clip-rule=evenodd"), 0); }
#[test] fn masking_clipPath_circle_shorthand_with_stroke_box() { assert_eq!(render("tests/masking/clipPath/circle-shorthand-with-stroke-box"), 0); }
#[test] fn masking_clipPath_circle_shorthand_with_view_box() { assert_eq!(render("tests/masking/clipPath/circle-shorthand-with-view-box"), 0); }
#[test] fn masking_clipPath_circle_shorthand() { assert_eq!(render("tests/masking/clipPath/circle-shorthand"), 0); }
#[test] fn masking_clipPath_clip_path_on_child_with_transform() { assert_eq!(render("tests/masking/clipPath/clip-path-on-child-with-transform"), 0); }
#[test] fn masking_clipPath_clip_path_on_child() { assert_eq!(render("tests/masking/clipPath/clip-path-on-child"), 0); }
#[test] fn masking_clipPath_clip_path_on_children() { assert_eq!(render("tests/masking/clipPath/clip-path-on-children"), 0); }
#[test] fn masking_clipPath_clip_path_on_self_2() { assert_eq!(render("tests/masking/clipPath/clip-path-on-self-2"), 0); }
#[test] fn masking_clipPath_clip_path_on_self() { assert_eq!(render("tests/masking/clipPath/clip-path-on-self"), 0); }
#[test] fn masking_clipPath_clip_path_with_transform_on_text() { assert_eq!(render("tests/masking/clipPath/clip-path-with-transform-on-text"), 0); }
#[test] fn masking_clipPath_clip_path_with_transform() { assert_eq!(render("tests/masking/clipPath/clip-path-with-transform"), 0); }
#[test] fn masking_clipPath_clip_rule_from_parent_node() { assert_eq!(render("tests/masking/clipPath/clip-rule-from-parent-node"), 0); }
#[test] fn masking_clipPath_clip_rule_eq_evenodd() { assert_eq!(render("tests/masking/clipPath/clip-rule=evenodd"), 0); }
#[test] fn masking_clipPath_clipPathUnits_eq_objectBoundingBox() { assert_eq!(render("tests/masking/clipPath/clipPathUnits=objectBoundingBox"), 0); }
#[test] fn masking_clipPath_clipping_with_complex_text_1() { assert_eq!(render("tests/masking/clipPath/clipping-with-complex-text-1"), 0); }
#[test] fn masking_clipPath_clipping_with_complex_text_2() { assert_eq!(render("tests/masking/clipPath/clipping-with-complex-text-2"), 0); }
#[test] fn masking_clipPath_clipping_with_complex_text_and_clip_rule() { assert_eq!(render("tests/masking/clipPath/clipping-with-complex-text-and-clip-rule"), 0); }
#[test] fn masking_clipPath_clipping_with_text() { assert_eq!(render("tests/masking/clipPath/clipping-with-text"), 0); }
#[test] fn masking_clipPath_fill_has_no_effect() { assert_eq!(render("tests/masking/clipPath/fill-has-no-effect"), 0); }
#[test] fn masking_clipPath_filter_has_no_effect() { assert_eq!(render("tests/masking/clipPath/filter-has-no-effect"), 0); }
#[test] fn masking_clipPath_g_is_not_a_valid_child() { assert_eq!(render("tests/masking/clipPath/g-is-not-a-valid-child"), 0); }
#[test] fn masking_clipPath_image_is_not_a_valid_child() { assert_eq!(render("tests/masking/clipPath/image-is-not-a-valid-child"), 0); }
#[test] fn masking_clipPath_invalid_FuncIRI() { assert_eq!(render("tests/masking/clipPath/invalid-FuncIRI"), 0); }
#[test] fn masking_clipPath_invalid_clip_path_on_child() { assert_eq!(render("tests/masking/clipPath/invalid-clip-path-on-child"), 0); }
#[test] fn masking_clipPath_invalid_clip_path_on_self() { assert_eq!(render("tests/masking/clipPath/invalid-clip-path-on-self"), 0); }
#[test] fn masking_clipPath_invalid_transform_on_clipPath() { assert_eq!(render("tests/masking/clipPath/invalid-transform-on-clipPath"), 0); }
#[test] fn masking_clipPath_invisible_child_1() { assert_eq!(render("tests/masking/clipPath/invisible-child-1"), 0); }
#[test] fn masking_clipPath_invisible_child_2() { assert_eq!(render("tests/masking/clipPath/invisible-child-2"), 0); }
#[test] fn masking_clipPath_line_is_not_a_valid_child() { assert_eq!(render("tests/masking/clipPath/line-is-not-a-valid-child"), 0); }
#[test] fn masking_clipPath_malformed_path_child() { assert_eq!(render("tests/masking/clipPath/malformed-path-child"), 0); }
#[test] fn masking_clipPath_mask_has_no_effect() { assert_eq!(render("tests/masking/clipPath/mask-has-no-effect"), 0); }
#[test] fn masking_clipPath_mixed_clip_rule() { assert_eq!(render("tests/masking/clipPath/mixed-clip-rule"), 0); }
#[test] fn masking_clipPath_multiple_children() { assert_eq!(render("tests/masking/clipPath/multiple-children"), 0); }
#[test] fn masking_clipPath_nested_clip_path() { assert_eq!(render("tests/masking/clipPath/nested-clip-path"), 0); }
#[test] fn masking_clipPath_no_children() { assert_eq!(render("tests/masking/clipPath/no-children"), 0); }
#[test] fn masking_clipPath_none() { assert_eq!(render("tests/masking/clipPath/none"), 0); }
#[test] fn masking_clipPath_on_a_horizontal_line() { assert_eq!(render("tests/masking/clipPath/on-a-horizontal-line"), 0); }
#[test] fn masking_clipPath_on_the_root_svg_with_size() { assert_eq!(render("tests/masking/clipPath/on-the-root-svg-with-size"), 0); }
#[test] fn masking_clipPath_on_the_root_svg_without_size() { assert_eq!(render("tests/masking/clipPath/on-the-root-svg-without-size"), 0); }
#[test] fn masking_clipPath_opacity_has_no_effect() { assert_eq!(render("tests/masking/clipPath/opacity-has-no-effect"), 0); }
#[test] fn masking_clipPath_overlapped_shapes_with_evenodd() { assert_eq!(render("tests/masking/clipPath/overlapped-shapes-with-evenodd"), 0); }
#[test] fn masking_clipPath_recursive_on_child() { assert_eq!(render("tests/masking/clipPath/recursive-on-child"), 0); }
#[test] fn masking_clipPath_recursive_on_self() { assert_eq!(render("tests/masking/clipPath/recursive-on-self"), 0); }
#[test] fn masking_clipPath_recursive() { assert_eq!(render("tests/masking/clipPath/recursive"), 0); }
#[test] fn masking_clipPath_self_recursive() { assert_eq!(render("tests/masking/clipPath/self-recursive"), 0); }
#[test] fn masking_clipPath_simple_case() { assert_eq!(render("tests/masking/clipPath/simple-case"), 0); }
#[test] fn masking_clipPath_stroke_has_no_effect() { assert_eq!(render("tests/masking/clipPath/stroke-has-no-effect"), 0); }
#[test] fn masking_clipPath_switch_is_not_a_valid_child() { assert_eq!(render("tests/masking/clipPath/switch-is-not-a-valid-child"), 0); }
#[test] fn masking_clipPath_symbol_via_use_is_not_a_valid_child() { assert_eq!(render("tests/masking/clipPath/symbol-via-use-is-not-a-valid-child"), 0); }
#[test] fn masking_clipPath_transform_on_clipPath() { assert_eq!(render("tests/masking/clipPath/transform-on-clipPath"), 0); }
#[test] fn masking_clipPath_with_invalid_child_via_use() { assert_eq!(render("tests/masking/clipPath/with-invalid-child-via-use"), 0); }
#[test] fn masking_clipPath_with_marker_on_clip() { assert_eq!(render("tests/masking/clipPath/with-marker-on-clip"), 0); }
#[test] fn masking_clipPath_with_use_child() { assert_eq!(render("tests/masking/clipPath/with-use-child"), 0); }
#[test] fn masking_mask_color_interpolation_eq_linearRGB() { assert_eq!(render("tests/masking/mask/color-interpolation=linearRGB"), 0); }
#[test] fn masking_mask_half_width_region_with_rotation() { assert_eq!(render("tests/masking/mask/half-width-region-with-rotation"), 0); }
#[test] fn masking_mask_invalid_FuncIRI() { assert_eq!(render("tests/masking/mask/invalid-FuncIRI"), 0); }
#[test] fn masking_mask_invalid_child() { assert_eq!(render("tests/masking/mask/invalid-child"), 0); }
#[test] fn masking_mask_invisible_child_1() { assert_eq!(render("tests/masking/mask/invisible-child-1"), 0); }
#[test] fn masking_mask_invisible_child_2() { assert_eq!(render("tests/masking/mask/invisible-child-2"), 0); }
#[test] fn masking_mask_mask_on_child() { assert_eq!(render("tests/masking/mask/mask-on-child"), 0); }
#[test] fn masking_mask_mask_on_self_with_mask_type_eq_alpha() { assert_eq!(render("tests/masking/mask/mask-on-self-with-mask-type=alpha"), 0); }
#[test] fn masking_mask_mask_on_self_with_mixed_mask_type() { assert_eq!(render("tests/masking/mask/mask-on-self-with-mixed-mask-type"), 0); }
#[test] fn masking_mask_mask_on_self() { assert_eq!(render("tests/masking/mask/mask-on-self"), 0); }
#[test] fn masking_mask_mask_type_eq_alpha() { assert_eq!(render("tests/masking/mask/mask-type=alpha"), 0); }
#[test] fn masking_mask_mask_type_eq_invalid() { assert_eq!(render("tests/masking/mask/mask-type=invalid"), 0); }
#[test] fn masking_mask_mask_type_eq_luminance() { assert_eq!(render("tests/masking/mask/mask-type=luminance"), 0); }
#[test] fn masking_mask_maskContentUnits_eq_objectBoundingBox() { assert_eq!(render("tests/masking/mask/maskContentUnits=objectBoundingBox"), 0); }
#[test] fn masking_mask_maskUnits_eq_objectBoundingBox_with_percent() { assert_eq!(render("tests/masking/mask/maskUnits=objectBoundingBox-with-percent"), 0); }
#[test] fn masking_mask_maskUnits_eq_userSpaceOnUse_with_percent() { assert_eq!(render("tests/masking/mask/maskUnits=userSpaceOnUse-with-percent"), 0); }
#[test] fn masking_mask_maskUnits_eq_userSpaceOnUse_with_rect() { assert_eq!(render("tests/masking/mask/maskUnits=userSpaceOnUse-with-rect"), 0); }
#[test] fn masking_mask_maskUnits_eq_userSpaceOnUse_with_width_only() { assert_eq!(render("tests/masking/mask/maskUnits=userSpaceOnUse-with-width-only"), 0); }
#[test] fn masking_mask_maskUnits_eq_userSpaceOnUse_without_rect() { assert_eq!(render("tests/masking/mask/maskUnits=userSpaceOnUse-without-rect"), 0); }
#[test] fn masking_mask_nested_objectBoundingBox() { assert_eq!(render("tests/masking/mask/nested-objectBoundingBox"), 0); }
#[test] fn masking_mask_no_children() { assert_eq!(render("tests/masking/mask/no-children"), 0); }
#[test] fn masking_mask_none() { assert_eq!(render("tests/masking/mask/none"), 0); }
#[test] fn masking_mask_on_a_horizontal_line() { assert_eq!(render("tests/masking/mask/on-a-horizontal-line"), 0); }
#[test] fn masking_mask_on_a_small_object() { assert_eq!(render("tests/masking/mask/on-a-small-object"), 0); }
#[test] fn masking_mask_on_group_with_transform() { assert_eq!(render("tests/masking/mask/on-group-with-transform"), 0); }
#[test] fn masking_mask_recursive_on_child() { assert_eq!(render("tests/masking/mask/recursive-on-child"), 0); }
#[test] fn masking_mask_recursive_on_self() { assert_eq!(render("tests/masking/mask/recursive-on-self"), 0); }
#[test] fn masking_mask_recursive() { assert_eq!(render("tests/masking/mask/recursive"), 0); }
#[test] fn masking_mask_self_recursive() { assert_eq!(render("tests/masking/mask/self-recursive"), 0); }
#[test] fn masking_mask_simple_case() { assert_eq!(render("tests/masking/mask/simple-case"), 0); }
#[test] fn masking_mask_transform_has_no_effect() { assert_eq!(render("tests/masking/mask/transform-has-no-effect"), 0); }
#[test] fn masking_mask_transform_on_shape() { assert_eq!(render("tests/masking/mask/transform-on-shape"), 0); }
#[test] fn masking_mask_with_clip_path() { assert_eq!(render("tests/masking/mask/with-clip-path"), 0); }
#[test] fn masking_mask_with_grayscale_image() { assert_eq!(render("tests/masking/mask/with-grayscale-image"), 0); }
#[test] fn masking_mask_with_image() { assert_eq!(render("tests/masking/mask/with-image"), 0); }
#[test] fn masking_mask_with_opacity_1() { assert_eq!(render("tests/masking/mask/with-opacity-1"), 0); }
#[test] fn masking_mask_with_opacity_2() { assert_eq!(render("tests/masking/mask/with-opacity-2"), 0); }
#[test] fn masking_mask_with_opacity_3() { assert_eq!(render("tests/masking/mask/with-opacity-3"), 0); }
#[test] fn paint_servers_linearGradient_attributes_via_xlink_href_complex_order() { assert_eq!(render("tests/paint-servers/linearGradient/attributes-via-xlink-href-complex-order"), 0); }
#[test] fn paint_servers_linearGradient_attributes_via_xlink_href_from_radialGradient() { assert_eq!(render("tests/paint-servers/linearGradient/attributes-via-xlink-href-from-radialGradient"), 0); }
#[test] fn paint_servers_linearGradient_attributes_via_xlink_href_from_rect() { assert_eq!(render("tests/paint-servers/linearGradient/attributes-via-xlink-href-from-rect"), 0); }
#[test] fn paint_servers_linearGradient_attributes_via_xlink_href_only_required() { assert_eq!(render("tests/paint-servers/linearGradient/attributes-via-xlink-href-only-required"), 0); }
#[test] fn paint_servers_linearGradient_attributes_via_xlink_href() { assert_eq!(render("tests/paint-servers/linearGradient/attributes-via-xlink-href"), 0); }
#[test] fn paint_servers_linearGradient_default_attributes() { assert_eq!(render("tests/paint-servers/linearGradient/default-attributes"), 0); }
#[test] fn paint_servers_linearGradient_gradientTransform_and_transform() { assert_eq!(render("tests/paint-servers/linearGradient/gradientTransform-and-transform"), 0); }
#[test] fn paint_servers_linearGradient_gradientTransform() { assert_eq!(render("tests/paint-servers/linearGradient/gradientTransform"), 0); }
#[test] fn paint_servers_linearGradient_gradientUnits_eq_objectBoundingBox_with_percent() { assert_eq!(render("tests/paint-servers/linearGradient/gradientUnits=objectBoundingBox-with-percent"), 0); }
#[test] fn paint_servers_linearGradient_gradientUnits_eq_userSpaceOnUse_with_percent() { assert_eq!(render("tests/paint-servers/linearGradient/gradientUnits=userSpaceOnUse-with-percent"), 0); }
#[test] fn paint_servers_linearGradient_gradientUnits_eq_userSpaceOnUse() { assert_eq!(render("tests/paint-servers/linearGradient/gradientUnits=userSpaceOnUse"), 0); }
#[test] fn paint_servers_linearGradient_hsla_color() { assert_eq!(render("tests/paint-servers/linearGradient/hsla-color"), 0); }
#[test] fn paint_servers_linearGradient_invalid_child_1() { assert_eq!(render("tests/paint-servers/linearGradient/invalid-child-1"), 0); }
#[test] fn paint_servers_linearGradient_invalid_child_2() { assert_eq!(render("tests/paint-servers/linearGradient/invalid-child-2"), 0); }
#[test] fn paint_servers_linearGradient_invalid_child_3() { assert_eq!(render("tests/paint-servers/linearGradient/invalid-child-3"), 0); }
#[test] fn paint_servers_linearGradient_invalid_gradientTransform() { assert_eq!(render("tests/paint-servers/linearGradient/invalid-gradientTransform"), 0); }
#[test] fn paint_servers_linearGradient_invalid_gradientUnits() { assert_eq!(render("tests/paint-servers/linearGradient/invalid-gradientUnits"), 0); }
#[test] fn paint_servers_linearGradient_invalid_spreadMethod() { assert_eq!(render("tests/paint-servers/linearGradient/invalid-spreadMethod"), 0); }
#[test] fn paint_servers_linearGradient_invalid_xlink_href() { assert_eq!(render("tests/paint-servers/linearGradient/invalid-xlink-href"), 0); }
#[test] fn paint_servers_linearGradient_many_stops() { assert_eq!(render("tests/paint-servers/linearGradient/many-stops"), 0); }
#[test] fn paint_servers_linearGradient_no_stops() { assert_eq!(render("tests/paint-servers/linearGradient/no-stops"), 0); }
#[test] fn paint_servers_linearGradient_recursive_xlink_href_1() { assert_eq!(render("tests/paint-servers/linearGradient/recursive-xlink-href-1"), 0); }
#[test] fn paint_servers_linearGradient_recursive_xlink_href_2() { assert_eq!(render("tests/paint-servers/linearGradient/recursive-xlink-href-2"), 0); }
#[test] fn paint_servers_linearGradient_recursive_xlink_href_3() { assert_eq!(render("tests/paint-servers/linearGradient/recursive-xlink-href-3"), 0); }
#[test] fn paint_servers_linearGradient_self_recursive_xlink_href() { assert_eq!(render("tests/paint-servers/linearGradient/self-recursive-xlink-href"), 0); }
#[test] fn paint_servers_linearGradient_single_stop_with_opacity_used_by_fill_and_stroke() { assert_eq!(render("tests/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill-and-stroke"), 0); }
#[test] fn paint_servers_linearGradient_single_stop_with_opacity_used_by_fill() { assert_eq!(render("tests/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill"), 0); }
#[test] fn paint_servers_linearGradient_single_stop_with_opacity_used_by_stroke() { assert_eq!(render("tests/paint-servers/linearGradient/single-stop-with-opacity-used-by-stroke"), 0); }
#[test] fn paint_servers_linearGradient_single_stop() { assert_eq!(render("tests/paint-servers/linearGradient/single-stop"), 0); }
#[test] fn paint_servers_linearGradient_spreadMethod_eq_pad() { assert_eq!(render("tests/paint-servers/linearGradient/spreadMethod=pad"), 0); }
#[test] fn paint_servers_linearGradient_spreadMethod_eq_reflect() { assert_eq!(render("tests/paint-servers/linearGradient/spreadMethod=reflect"), 0); }
#[test] fn paint_servers_linearGradient_spreadMethod_eq_repeat() { assert_eq!(render("tests/paint-servers/linearGradient/spreadMethod=repeat"), 0); }
#[test] fn paint_servers_linearGradient_stops_via_xlink_href_complex_order_1() { assert_eq!(render("tests/paint-servers/linearGradient/stops-via-xlink-href-complex-order-1"), 0); }
#[test] fn paint_servers_linearGradient_stops_via_xlink_href_complex_order_2() { assert_eq!(render("tests/paint-servers/linearGradient/stops-via-xlink-href-complex-order-2"), 0); }
#[test] fn paint_servers_linearGradient_stops_via_xlink_href_from_radialGradient() { assert_eq!(render("tests/paint-servers/linearGradient/stops-via-xlink-href-from-radialGradient"), 0); }
#[test] fn paint_servers_linearGradient_stops_via_xlink_href_from_rect() { assert_eq!(render("tests/paint-servers/linearGradient/stops-via-xlink-href-from-rect"), 0); }
#[test] fn paint_servers_linearGradient_stops_via_xlink_href() { assert_eq!(render("tests/paint-servers/linearGradient/stops-via-xlink-href"), 0); }
#[test] fn paint_servers_linearGradient_unresolved_xlink_href() { assert_eq!(render("tests/paint-servers/linearGradient/unresolved-xlink-href"), 0); }
#[test] fn paint_servers_pattern_attributes_via_xlink_href() { assert_eq!(render("tests/paint-servers/pattern/attributes-via-xlink-href"), 0); }
#[test] fn paint_servers_pattern_child_with_invalid_FuncIRI() { assert_eq!(render("tests/paint-servers/pattern/child-with-invalid-FuncIRI"), 0); }
#[test] fn paint_servers_pattern_children_via_xlink_href() { assert_eq!(render("tests/paint-servers/pattern/children-via-xlink-href"), 0); }
#[test] fn paint_servers_pattern_display_eq_none_on_child() { assert_eq!(render("tests/paint-servers/pattern/display=none-on-child"), 0); }
#[test] fn paint_servers_pattern_everything_via_xlink_href() { assert_eq!(render("tests/paint-servers/pattern/everything-via-xlink-href"), 0); }
#[test] fn paint_servers_pattern_invalid_patternTransform() { assert_eq!(render("tests/paint-servers/pattern/invalid-patternTransform"), 0); }
#[test] fn paint_servers_pattern_invalid_patternUnits_and_patternContentUnits() { assert_eq!(render("tests/paint-servers/pattern/invalid-patternUnits-and-patternContentUnits"), 0); }
#[test] fn paint_servers_pattern_missing_height() { assert_eq!(render("tests/paint-servers/pattern/missing-height"), 0); }
#[test] fn paint_servers_pattern_missing_width() { assert_eq!(render("tests/paint-servers/pattern/missing-width"), 0); }
#[test] fn paint_servers_pattern_nested_objectBoundingBox() { assert_eq!(render("tests/paint-servers/pattern/nested-objectBoundingBox"), 0); }
#[test] fn paint_servers_pattern_no_children() { assert_eq!(render("tests/paint-servers/pattern/no-children"), 0); }
#[test] fn paint_servers_pattern_out_of_order_referencing() { assert_eq!(render("tests/paint-servers/pattern/out-of-order-referencing"), 0); }
#[test] fn paint_servers_pattern_overflow_eq_visible() { assert_eq!(render("tests/paint-servers/pattern/overflow=visible"), 0); }
#[test] fn paint_servers_pattern_pattern_on_child() { assert_eq!(render("tests/paint-servers/pattern/pattern-on-child"), 0); }
#[test] fn paint_servers_pattern_patternContentUnits_with_viewBox() { assert_eq!(render("tests/paint-servers/pattern/patternContentUnits-with-viewBox"), 0); }
#[test] fn paint_servers_pattern_patternContentUnits_eq_objectBoundingBox() { assert_eq!(render("tests/paint-servers/pattern/patternContentUnits=objectBoundingBox"), 0); }
#[test] fn paint_servers_pattern_patternUnits_eq_objectBoundingBox_with_percent() { assert_eq!(render("tests/paint-servers/pattern/patternUnits=objectBoundingBox-with-percent"), 0); }
#[test] fn paint_servers_pattern_patternUnits_eq_objectBoundingBox() { assert_eq!(render("tests/paint-servers/pattern/patternUnits=objectBoundingBox"), 0); }
#[test] fn paint_servers_pattern_patternUnits_eq_userSpaceOnUse_with_percent() { assert_eq!(render("tests/paint-servers/pattern/patternUnits=userSpaceOnUse-with-percent"), 0); }
#[test] fn paint_servers_pattern_preserveAspectRatio() { assert_eq!(render("tests/paint-servers/pattern/preserveAspectRatio"), 0); }
#[test] fn paint_servers_pattern_recursive_on_child() { assert_eq!(render("tests/paint-servers/pattern/recursive-on-child"), 0); }
#[test] fn paint_servers_pattern_self_recursive_on_child() { assert_eq!(render("tests/paint-servers/pattern/self-recursive-on-child"), 0); }
#[test] fn paint_servers_pattern_self_recursive() { assert_eq!(render("tests/paint-servers/pattern/self-recursive"), 0); }
#[test] fn paint_servers_pattern_simple_case() { assert_eq!(render("tests/paint-servers/pattern/simple-case"), 0); }
#[test] fn paint_servers_pattern_text_child() { assert_eq!(render("tests/paint-servers/pattern/text-child"), 0); }
#[test] fn paint_servers_pattern_tiny_pattern_upscaled() { assert_eq!(render("tests/paint-servers/pattern/tiny-pattern-upscaled"), 0); }
#[test] fn paint_servers_pattern_transform_and_patternTransform() { assert_eq!(render("tests/paint-servers/pattern/transform-and-patternTransform"), 0); }
#[test] fn paint_servers_pattern_viewBox_via_xlink_href() { assert_eq!(render("tests/paint-servers/pattern/viewBox-via-xlink-href"), 0); }
#[test] fn paint_servers_pattern_with_patternTransform() { assert_eq!(render("tests/paint-servers/pattern/with-patternTransform"), 0); }
#[test] fn paint_servers_pattern_with_viewBox() { assert_eq!(render("tests/paint-servers/pattern/with-viewBox"), 0); }
#[test] fn paint_servers_pattern_with_x_and_y() { assert_eq!(render("tests/paint-servers/pattern/with-x-and-y"), 0); }
#[test] fn paint_servers_radialGradient_attributes_via_xlink_href_complex_order() { assert_eq!(render("tests/paint-servers/radialGradient/attributes-via-xlink-href-complex-order"), 0); }
#[test] fn paint_servers_radialGradient_attributes_via_xlink_href_from_linearGradient() { assert_eq!(render("tests/paint-servers/radialGradient/attributes-via-xlink-href-from-linearGradient"), 0); }
#[test] fn paint_servers_radialGradient_attributes_via_xlink_href_from_rect() { assert_eq!(render("tests/paint-servers/radialGradient/attributes-via-xlink-href-from-rect"), 0); }
#[test] fn paint_servers_radialGradient_attributes_via_xlink_href_only_required() { assert_eq!(render("tests/paint-servers/radialGradient/attributes-via-xlink-href-only-required"), 0); }
#[test] fn paint_servers_radialGradient_attributes_via_xlink_href() { assert_eq!(render("tests/paint-servers/radialGradient/attributes-via-xlink-href"), 0); }
#[test] fn paint_servers_radialGradient_default_attributes() { assert_eq!(render("tests/paint-servers/radialGradient/default-attributes"), 0); }
#[test] fn paint_servers_radialGradient_focal_point_correction() { assert_eq!(render("tests/paint-servers/radialGradient/focal-point-correction"), 0); }
#[test] fn paint_servers_radialGradient_fr_eq__1() { assert_eq!(render("tests/paint-servers/radialGradient/fr=-1"), 0); }
#[test] fn paint_servers_radialGradient_fr_eq_0_2() { assert_eq!(render("tests/paint-servers/radialGradient/fr=0.2"), 0); }
#[test] fn paint_servers_radialGradient_fr_eq_0_5() { assert_eq!(render("tests/paint-servers/radialGradient/fr=0.5"), 0); }
#[test] fn paint_servers_radialGradient_fr_eq_0_7() { assert_eq!(render("tests/paint-servers/radialGradient/fr=0.7"), 0); }
#[test] fn paint_servers_radialGradient_fx_resolving_1() { assert_eq!(render("tests/paint-servers/radialGradient/fx-resolving-1"), 0); }
#[test] fn paint_servers_radialGradient_fx_resolving_2() { assert_eq!(render("tests/paint-servers/radialGradient/fx-resolving-2"), 0); }
#[test] fn paint_servers_radialGradient_fx_resolving_3() { assert_eq!(render("tests/paint-servers/radialGradient/fx-resolving-3"), 0); }
#[test] fn paint_servers_radialGradient_fy_resolving_1() { assert_eq!(render("tests/paint-servers/radialGradient/fy-resolving-1"), 0); }
#[test] fn paint_servers_radialGradient_fy_resolving_2() { assert_eq!(render("tests/paint-servers/radialGradient/fy-resolving-2"), 0); }
#[test] fn paint_servers_radialGradient_fy_resolving_3() { assert_eq!(render("tests/paint-servers/radialGradient/fy-resolving-3"), 0); }
#[test] fn paint_servers_radialGradient_gradientTransform_and_transform() { assert_eq!(render("tests/paint-servers/radialGradient/gradientTransform-and-transform"), 0); }
#[test] fn paint_servers_radialGradient_gradientTransform() { assert_eq!(render("tests/paint-servers/radialGradient/gradientTransform"), 0); }
#[test] fn paint_servers_radialGradient_gradientUnits_eq_objectBoundingBox_with_percent() { assert_eq!(render("tests/paint-servers/radialGradient/gradientUnits=objectBoundingBox-with-percent"), 0); }
#[test] fn paint_servers_radialGradient_gradientUnits_eq_userSpaceOnUse_with_percent() { assert_eq!(render("tests/paint-servers/radialGradient/gradientUnits=userSpaceOnUse-with-percent"), 0); }
#[test] fn paint_servers_radialGradient_gradientUnits_eq_userSpaceOnUse() { assert_eq!(render("tests/paint-servers/radialGradient/gradientUnits=userSpaceOnUse"), 0); }
#[test] fn paint_servers_radialGradient_hsla_color() { assert_eq!(render("tests/paint-servers/radialGradient/hsla-color"), 0); }
#[test] fn paint_servers_radialGradient_invalid_gradientTransform() { assert_eq!(render("tests/paint-servers/radialGradient/invalid-gradientTransform"), 0); }
#[test] fn paint_servers_radialGradient_invalid_gradientUnits() { assert_eq!(render("tests/paint-servers/radialGradient/invalid-gradientUnits"), 0); }
#[test] fn paint_servers_radialGradient_invalid_spreadMethod() { assert_eq!(render("tests/paint-servers/radialGradient/invalid-spreadMethod"), 0); }
#[test] fn paint_servers_radialGradient_invalid_xlink_href() { assert_eq!(render("tests/paint-servers/radialGradient/invalid-xlink-href"), 0); }
#[test] fn paint_servers_radialGradient_many_stops() { assert_eq!(render("tests/paint-servers/radialGradient/many-stops"), 0); }
#[test] fn paint_servers_radialGradient_negative_r() { assert_eq!(render("tests/paint-servers/radialGradient/negative-r"), 0); }
#[test] fn paint_servers_radialGradient_no_stops() { assert_eq!(render("tests/paint-servers/radialGradient/no-stops"), 0); }
#[test] fn paint_servers_radialGradient_recursive_xlink_href() { assert_eq!(render("tests/paint-servers/radialGradient/recursive-xlink-href"), 0); }
#[test] fn paint_servers_radialGradient_self_recursive_xlink_href() { assert_eq!(render("tests/paint-servers/radialGradient/self-recursive-xlink-href"), 0); }
#[test] fn paint_servers_radialGradient_single_stop() { assert_eq!(render("tests/paint-servers/radialGradient/single-stop"), 0); }
#[test] fn paint_servers_radialGradient_spreadMethod_eq_pad() { assert_eq!(render("tests/paint-servers/radialGradient/spreadMethod=pad"), 0); }
#[test] fn paint_servers_radialGradient_spreadMethod_eq_reflect() { assert_eq!(render("tests/paint-servers/radialGradient/spreadMethod=reflect"), 0); }
#[test] fn paint_servers_radialGradient_spreadMethod_eq_repeat() { assert_eq!(render("tests/paint-servers/radialGradient/spreadMethod=repeat"), 0); }
#[test] fn paint_servers_radialGradient_stops_via_xlink_href_complex_order() { assert_eq!(render("tests/paint-servers/radialGradient/stops-via-xlink-href-complex-order"), 0); }
#[test] fn paint_servers_radialGradient_stops_via_xlink_href_from_linearGradient() { assert_eq!(render("tests/paint-servers/radialGradient/stops-via-xlink-href-from-linearGradient"), 0); }
#[test] fn paint_servers_radialGradient_stops_via_xlink_href_from_rect() { assert_eq!(render("tests/paint-servers/radialGradient/stops-via-xlink-href-from-rect"), 0); }
#[test] fn paint_servers_radialGradient_stops_via_xlink_href() { assert_eq!(render("tests/paint-servers/radialGradient/stops-via-xlink-href"), 0); }
#[test] fn paint_servers_radialGradient_unresolved_xlink_href() { assert_eq!(render("tests/paint-servers/radialGradient/unresolved-xlink-href"), 0); }
#[test] fn paint_servers_radialGradient_xlink_href_not_to_gradient() { assert_eq!(render("tests/paint-servers/radialGradient/xlink-href-not-to-gradient"), 0); }
#[test] fn paint_servers_radialGradient_zero_r_with_stop_opacity_1() { assert_eq!(render("tests/paint-servers/radialGradient/zero-r-with-stop-opacity-1"), 0); }
#[test] fn paint_servers_radialGradient_zero_r_with_stop_opacity_2() { assert_eq!(render("tests/paint-servers/radialGradient/zero-r-with-stop-opacity-2"), 0); }
#[test] fn paint_servers_radialGradient_zero_r() { assert_eq!(render("tests/paint-servers/radialGradient/zero-r"), 0); }
#[test] fn paint_servers_stop_equal_stop_color() { assert_eq!(render("tests/paint-servers/stop/equal-stop-color"), 0); }
#[test] fn paint_servers_stop_hsla_color() { assert_eq!(render("tests/paint-servers/stop/hsla-color"), 0); }
#[test] fn paint_servers_stop_invalid_offset_1() { assert_eq!(render("tests/paint-servers/stop/invalid-offset-1"), 0); }
#[test] fn paint_servers_stop_invalid_offset_2() { assert_eq!(render("tests/paint-servers/stop/invalid-offset-2"), 0); }
#[test] fn paint_servers_stop_missing_offset_1() { assert_eq!(render("tests/paint-servers/stop/missing-offset-1"), 0); }
#[test] fn paint_servers_stop_missing_offset_2() { assert_eq!(render("tests/paint-servers/stop/missing-offset-2"), 0); }
#[test] fn paint_servers_stop_missing_offset_3() { assert_eq!(render("tests/paint-servers/stop/missing-offset-3"), 0); }
#[test] fn paint_servers_stop_missing_offset_4() { assert_eq!(render("tests/paint-servers/stop/missing-offset-4"), 0); }
#[test] fn paint_servers_stop_missing_offset_5() { assert_eq!(render("tests/paint-servers/stop/missing-offset-5"), 0); }
#[test] fn paint_servers_stop_missing_offset_6() { assert_eq!(render("tests/paint-servers/stop/missing-offset-6"), 0); }
#[test] fn paint_servers_stop_missing_offset_7() { assert_eq!(render("tests/paint-servers/stop/missing-offset-7"), 0); }
#[test] fn paint_servers_stop_no_stop_color() { assert_eq!(render("tests/paint-servers/stop/no-stop-color"), 0); }
#[test] fn paint_servers_stop_offset_clamping_with_percent() { assert_eq!(render("tests/paint-servers/stop/offset-clamping-with-percent"), 0); }
#[test] fn paint_servers_stop_offset_clamping() { assert_eq!(render("tests/paint-servers/stop/offset-clamping"), 0); }
#[test] fn paint_servers_stop_offset_with_percent() { assert_eq!(render("tests/paint-servers/stop/offset-with-percent"), 0); }
#[test] fn paint_servers_stop_stop_color_with_currentColor_1() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-currentColor-1"), 0); }
#[test] fn paint_servers_stop_stop_color_with_currentColor_2() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-currentColor-2"), 0); }
#[test] fn paint_servers_stop_stop_color_with_currentColor_3() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-currentColor-3"), 0); }
#[test] fn paint_servers_stop_stop_color_with_currentColor_4() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-currentColor-4"), 0); }
#[test] fn paint_servers_stop_stop_color_with_inherit_1() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-inherit-1"), 0); }
#[test] fn paint_servers_stop_stop_color_with_inherit_2() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-inherit-2"), 0); }
#[test] fn paint_servers_stop_stop_color_with_inherit_3() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-inherit-3"), 0); }
#[test] fn paint_servers_stop_stop_color_with_inherit_4() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-inherit-4"), 0); }
#[test] fn paint_servers_stop_stop_color_with_inherit_5() { assert_eq!(render("tests/paint-servers/stop/stop-color-with-inherit-5"), 0); }
#[test] fn paint_servers_stop_stop_with_smaller_offset() { assert_eq!(render("tests/paint-servers/stop/stop-with-smaller-offset"), 0); }
#[test] fn paint_servers_stop_stops_with_equal_offset_1() { assert_eq!(render("tests/paint-servers/stop/stops-with-equal-offset-1"), 0); }
#[test] fn paint_servers_stop_stops_with_equal_offset_2() { assert_eq!(render("tests/paint-servers/stop/stops-with-equal-offset-2"), 0); }
#[test] fn paint_servers_stop_stops_with_equal_offset_3() { assert_eq!(render("tests/paint-servers/stop/stops-with-equal-offset-3"), 0); }
#[test] fn paint_servers_stop_stops_with_equal_offset_4() { assert_eq!(render("tests/paint-servers/stop/stops-with-equal-offset-4"), 0); }
#[test] fn paint_servers_stop_stops_with_equal_offset_5() { assert_eq!(render("tests/paint-servers/stop/stops-with-equal-offset-5"), 0); }
#[test] fn paint_servers_stop_stops_with_equal_offset_6() { assert_eq!(render("tests/paint-servers/stop/stops-with-equal-offset-6"), 0); }
#[test] fn paint_servers_stop_zero_offset_in_the_middle() { assert_eq!(render("tests/paint-servers/stop/zero-offset-in-the-middle"), 0); }
#[test] fn paint_servers_stop_color_simple_case() { assert_eq!(render("tests/paint-servers/stop-color/simple-case"), 0); }
#[test] fn paint_servers_stop_opacity_50percent() { assert_eq!(render("tests/paint-servers/stop-opacity/50percent"), 0); }
#[test] fn paint_servers_stop_opacity_simple_case() { assert_eq!(render("tests/paint-servers/stop-opacity/simple-case"), 0); }
#[test] fn painting_color_inherit() { assert_eq!(render("tests/painting/color/inherit"), 0); }
#[test] fn painting_color_simple_case() { assert_eq!(render("tests/painting/color/simple-case"), 0); }
#[test] fn painting_display_bBox_impact() { assert_eq!(render("tests/painting/display/bBox-impact"), 0); }
#[test] fn painting_display_none_on_clipPath() { assert_eq!(render("tests/painting/display/none-on-clipPath"), 0); }
#[test] fn painting_display_none_on_defs() { assert_eq!(render("tests/painting/display/none-on-defs"), 0); }
#[test] fn painting_display_none_on_linearGradient() { assert_eq!(render("tests/painting/display/none-on-linearGradient"), 0); }
#[test] fn painting_display_none_on_rect() { assert_eq!(render("tests/painting/display/none-on-rect"), 0); }
#[test] fn painting_display_none_on_svg() { assert_eq!(render("tests/painting/display/none-on-svg"), 0); }
#[test] fn painting_display_none_on_tref() { assert_eq!(render("tests/painting/display/none-on-tref"), 0); }
#[test] fn painting_display_none_on_tspan_1() { assert_eq!(render("tests/painting/display/none-on-tspan-1"), 0); }
#[test] fn painting_display_none_on_tspan_2() { assert_eq!(render("tests/painting/display/none-on-tspan-2"), 0); }
#[test] fn painting_fill_RGB_color() { assert_eq!(render("tests/painting/fill/#RGB-color"), 0); }
#[test] fn painting_fill_RGBA() { assert_eq!(render("tests/painting/fill/#RGBA"), 0); }
#[test] fn painting_fill_RRGGBB_color() { assert_eq!(render("tests/painting/fill/#RRGGBB-color"), 0); }
#[test] fn painting_fill_RRGGBB_uppercase_color() { assert_eq!(render("tests/painting/fill/#RRGGBB-uppercase-color"), 0); }
#[test] fn painting_fill_RRGGBBAA() { assert_eq!(render("tests/painting/fill/#RRGGBBAA"), 0); }
#[test] fn painting_fill_currentColor_without_parent() { assert_eq!(render("tests/painting/fill/currentColor-without-parent"), 0); }
#[test] fn painting_fill_currentColor() { assert_eq!(render("tests/painting/fill/currentColor"), 0); }
#[test] fn painting_fill_double_inherit() { assert_eq!(render("tests/painting/fill/double-inherit"), 0); }
#[test] fn painting_fill_funcIRI_to_a_missing_element_with_a_fallback_color() { assert_eq!(render("tests/painting/fill/funcIRI-to-a-missing-element-with-a-fallback-color"), 0); }
#[test] fn painting_fill_funcIRI_to_a_missing_element_with_a_none_fallback() { assert_eq!(render("tests/painting/fill/funcIRI-to-a-missing-element-with-a-none-fallback"), 0); }
#[test] fn painting_fill_funcIRI_to_an_invalid_element_with_a_none_fallback() { assert_eq!(render("tests/painting/fill/funcIRI-to-an-invalid-element-with-a-none-fallback"), 0); }
#[test] fn painting_fill_funcIRI_to_an_unsupported_element() { assert_eq!(render("tests/painting/fill/funcIRI-to-an-unsupported-element"), 0); }
#[test] fn painting_fill_funcIRI_with_a_fallback_color() { assert_eq!(render("tests/painting/fill/funcIRI-with-a-fallback-color"), 0); }
#[test] fn painting_fill_hsl_120_100percent_25percent() { assert_eq!(render("tests/painting/fill/hsl-120-100percent-25percent"), 0); }
#[test] fn painting_fill_hsl_120_200percent_25percent() { assert_eq!(render("tests/painting/fill/hsl-120-200percent-25percent"), 0); }
#[test] fn painting_fill_hsl_360_100percent_25percent() { assert_eq!(render("tests/painting/fill/hsl-360-100percent-25percent"), 0); }
#[test] fn painting_fill_hsl_999_100percent_25percent() { assert_eq!(render("tests/painting/fill/hsl-999-100percent-25percent"), 0); }
#[test] fn painting_fill_hsl_with_alpha() { assert_eq!(render("tests/painting/fill/hsl-with-alpha"), 0); }
#[test] fn painting_fill_hsla_with_percentage_s_and_l_values() { assert_eq!(render("tests/painting/fill/hsla-with-percentage-s-and-l-values"), 0); }
#[test] fn painting_fill_icc_color() { assert_eq!(render("tests/painting/fill/icc-color"), 0); }
#[test] fn painting_fill_inherit_without_parent() { assert_eq!(render("tests/painting/fill/inherit-without-parent"), 0); }
#[test] fn painting_fill_inherit() { assert_eq!(render("tests/painting/fill/inherit"), 0); }
#[test] fn painting_fill_invalid_RRGGBB_1() { assert_eq!(render("tests/painting/fill/invalid-#RRGGBB-1"), 0); }
#[test] fn painting_fill_invalid_RRGGBB_2() { assert_eq!(render("tests/painting/fill/invalid-#RRGGBB-2"), 0); }
#[test] fn painting_fill_invalid_RRGGBB_3() { assert_eq!(render("tests/painting/fill/invalid-#RRGGBB-3"), 0); }
#[test] fn painting_fill_invalid_FuncIRI_with_a_currentColor_fallback() { assert_eq!(render("tests/painting/fill/invalid-FuncIRI-with-a-currentColor-fallback"), 0); }
#[test] fn painting_fill_invalid_FuncIRI_with_a_fallback_color() { assert_eq!(render("tests/painting/fill/invalid-FuncIRI-with-a-fallback-color"), 0); }
#[test] fn painting_fill_linear_gradient_on_shape() { assert_eq!(render("tests/painting/fill/linear-gradient-on-shape"), 0); }
#[test] fn painting_fill_linear_gradient_on_text() { assert_eq!(render("tests/painting/fill/linear-gradient-on-text"), 0); }
#[test] fn painting_fill_missing_FuncIRI_with_a_currentColor_fallback() { assert_eq!(render("tests/painting/fill/missing-FuncIRI-with-a-currentColor-fallback"), 0); }
#[test] fn painting_fill_named_color_in_mixedcase() { assert_eq!(render("tests/painting/fill/named-color-in-mixedcase"), 0); }
#[test] fn painting_fill_named_color_in_uppercase() { assert_eq!(render("tests/painting/fill/named-color-in-uppercase"), 0); }
#[test] fn painting_fill_named_color() { assert_eq!(render("tests/painting/fill/named-color"), 0); }
#[test] fn painting_fill_none() { assert_eq!(render("tests/painting/fill/none"), 0); }
#[test] fn painting_fill_not_trimmed_attribute_value() { assert_eq!(render("tests/painting/fill/not-trimmed-attribute-value"), 0); }
#[test] fn painting_fill_pattern_on_shape() { assert_eq!(render("tests/painting/fill/pattern-on-shape"), 0); }
#[test] fn painting_fill_pattern_on_text() { assert_eq!(render("tests/painting/fill/pattern-on-text"), 0); }
#[test] fn painting_fill_radial_gradient_on_shape() { assert_eq!(render("tests/painting/fill/radial-gradient-on-shape"), 0); }
#[test] fn painting_fill_radial_gradient_on_text() { assert_eq!(render("tests/painting/fill/radial-gradient-on-text"), 0); }
#[test] fn painting_fill_random_value() { assert_eq!(render("tests/painting/fill/random-value"), 0); }
#[test] fn painting_fill_rgb_0_127_0_0_5() { assert_eq!(render("tests/painting/fill/rgb-0-127-0-0.5"), 0); }
#[test] fn painting_fill_rgb_color_with_a_big_fraction_part() { assert_eq!(render("tests/painting/fill/rgb-color-with-a-big-fraction-part"), 0); }
#[test] fn painting_fill_rgb_color_with_extra_spaces() { assert_eq!(render("tests/painting/fill/rgb-color-with-extra-spaces"), 0); }
#[test] fn painting_fill_rgb_color_with_float_percentage_values() { assert_eq!(render("tests/painting/fill/rgb-color-with-float-percentage-values"), 0); }
#[test] fn painting_fill_rgb_color_with_percentage_overflow() { assert_eq!(render("tests/painting/fill/rgb-color-with-percentage-overflow"), 0); }
#[test] fn painting_fill_rgb_color_with_percentage_values() { assert_eq!(render("tests/painting/fill/rgb-color-with-percentage-values"), 0); }
#[test] fn painting_fill_rgb_color() { assert_eq!(render("tests/painting/fill/rgb-color"), 0); }
#[test] fn painting_fill_rgb_int_int_int() { assert_eq!(render("tests/painting/fill/rgb-int-int-int"), 0); }
#[test] fn painting_fill_rgba_0_127_0__1() { assert_eq!(render("tests/painting/fill/rgba-0-127-0--1"), 0); }
#[test] fn painting_fill_rgba_0_127_0_0_5() { assert_eq!(render("tests/painting/fill/rgba-0-127-0-0.5"), 0); }
#[test] fn painting_fill_rgba_0_127_0_0() { assert_eq!(render("tests/painting/fill/rgba-0-127-0-0"), 0); }
#[test] fn painting_fill_rgba_0_127_0_1() { assert_eq!(render("tests/painting/fill/rgba-0-127-0-1"), 0); }
#[test] fn painting_fill_rgba_0_127_0_2() { assert_eq!(render("tests/painting/fill/rgba-0-127-0-2"), 0); }
#[test] fn painting_fill_rgba_0_127_0_50percent() { assert_eq!(render("tests/painting/fill/rgba-0-127-0-50percent"), 0); }
#[test] fn painting_fill_rgba_0_50percent_0_0_5() { assert_eq!(render("tests/painting/fill/rgba-0-50percent-0-0.5"), 0); }
#[test] fn painting_fill_rgba_0percent_50percent_0percent_0_5() { assert_eq!(render("tests/painting/fill/rgba-0percent-50percent-0percent-0.5"), 0); }
#[test] fn painting_fill_transparent() { assert_eq!(render("tests/painting/fill/transparent"), 0); }
#[test] fn painting_fill_uppercase_rgb_color() { assert_eq!(render("tests/painting/fill/uppercase-rgb-color"), 0); }
#[test] fn painting_fill_valid_FuncIRI_with_a_fallback_ICC_color() { assert_eq!(render("tests/painting/fill/valid-FuncIRI-with-a-fallback-ICC-color"), 0); }
#[test] fn painting_fill_opacity_50percent() { assert_eq!(render("tests/painting/fill-opacity/50percent"), 0); }
#[test] fn painting_fill_opacity_half_opacity() { assert_eq!(render("tests/painting/fill-opacity/half-opacity"), 0); }
#[test] fn painting_fill_opacity_nested() { assert_eq!(render("tests/painting/fill-opacity/nested"), 0); }
#[test] fn painting_fill_opacity_on_parent() { assert_eq!(render("tests/painting/fill-opacity/on-parent"), 0); }
#[test] fn painting_fill_opacity_on_text() { assert_eq!(render("tests/painting/fill-opacity/on-text"), 0); }
#[test] fn painting_fill_opacity_with_linearGradient() { assert_eq!(render("tests/painting/fill-opacity/with-linearGradient"), 0); }
#[test] fn painting_fill_opacity_with_opacity() { assert_eq!(render("tests/painting/fill-opacity/with-opacity"), 0); }
#[test] fn painting_fill_opacity_with_pattern() { assert_eq!(render("tests/painting/fill-opacity/with-pattern"), 0); }
#[test] fn painting_fill_rule_evenodd() { assert_eq!(render("tests/painting/fill-rule/evenodd"), 0); }
#[test] fn painting_fill_rule_nonzero() { assert_eq!(render("tests/painting/fill-rule/nonzero"), 0); }
#[test] fn painting_image_rendering_on_feImage() { assert_eq!(render("tests/painting/image-rendering/on-feImage"), 0); }
#[test] fn painting_image_rendering_optimizeSpeed_on_SVG() { assert_eq!(render("tests/painting/image-rendering/optimizeSpeed-on-SVG"), 0); }
#[test] fn painting_image_rendering_optimizeSpeed() { assert_eq!(render("tests/painting/image-rendering/optimizeSpeed"), 0); }
#[test] fn painting_isolation_as_property() { assert_eq!(render("tests/painting/isolation/as-property"), 0); }
#[test] fn painting_isolation_isolate() { assert_eq!(render("tests/painting/isolation/isolate"), 0); }
#[test] fn painting_marker_default_clip() { assert_eq!(render("tests/painting/marker/default-clip"), 0); }
#[test] fn painting_marker_empty() { assert_eq!(render("tests/painting/marker/empty"), 0); }
#[test] fn painting_marker_inheritance_1() { assert_eq!(render("tests/painting/marker/inheritance-1"), 0); }
#[test] fn painting_marker_inheritance_2() { assert_eq!(render("tests/painting/marker/inheritance-2"), 0); }
#[test] fn painting_marker_invalid_child() { assert_eq!(render("tests/painting/marker/invalid-child"), 0); }
#[test] fn painting_marker_marker_on_circle() { assert_eq!(render("tests/painting/marker/marker-on-circle"), 0); }
#[test] fn painting_marker_marker_on_line() { assert_eq!(render("tests/painting/marker/marker-on-line"), 0); }
#[test] fn painting_marker_marker_on_polygon() { assert_eq!(render("tests/painting/marker/marker-on-polygon"), 0); }
#[test] fn painting_marker_marker_on_polyline() { assert_eq!(render("tests/painting/marker/marker-on-polyline"), 0); }
#[test] fn painting_marker_marker_on_rect() { assert_eq!(render("tests/painting/marker/marker-on-rect"), 0); }
#[test] fn painting_marker_marker_on_rounded_rect() { assert_eq!(render("tests/painting/marker/marker-on-rounded-rect"), 0); }
#[test] fn painting_marker_marker_on_text() { assert_eq!(render("tests/painting/marker/marker-on-text"), 0); }
#[test] fn painting_marker_marker_with_a_negative_size() { assert_eq!(render("tests/painting/marker/marker-with-a-negative-size"), 0); }
#[test] fn painting_marker_nested() { assert_eq!(render("tests/painting/marker/nested"), 0); }
#[test] fn painting_marker_no_stroke_on_target() { assert_eq!(render("tests/painting/marker/no-stroke-on-target"), 0); }
#[test] fn painting_marker_on_ArcTo() { assert_eq!(render("tests/painting/marker/on-ArcTo"), 0); }
#[test] fn painting_marker_only_marker_end() { assert_eq!(render("tests/painting/marker/only-marker-end"), 0); }
#[test] fn painting_marker_only_marker_mid() { assert_eq!(render("tests/painting/marker/only-marker-mid"), 0); }
#[test] fn painting_marker_only_marker_start() { assert_eq!(render("tests/painting/marker/only-marker-start"), 0); }
#[test] fn painting_marker_orient_eq__45() { assert_eq!(render("tests/painting/marker/orient=-45"), 0); }
#[test] fn painting_marker_orient_eq_0_25turn() { assert_eq!(render("tests/painting/marker/orient=0.25turn"), 0); }
#[test] fn painting_marker_orient_eq_1_5rad() { assert_eq!(render("tests/painting/marker/orient=1.5rad"), 0); }
#[test] fn painting_marker_orient_eq_30() { assert_eq!(render("tests/painting/marker/orient=30"), 0); }
#[test] fn painting_marker_orient_eq_40grad() { assert_eq!(render("tests/painting/marker/orient=40grad"), 0); }
#[test] fn painting_marker_orient_eq_9999() { assert_eq!(render("tests/painting/marker/orient=9999"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_1() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-1"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_2() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-2"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_3() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-3"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_4() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-4"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_5() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-5"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_6() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-6"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_7() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-7"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_C_8() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-C-8"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_L() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-L"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_C_M_L() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-C-M-L"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_L_C() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-L-C"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_L_L_Z_Z_Z() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-L-L-Z-Z-Z"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_L_L() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-L-L"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_L_M_C() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-L-M-C"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_L_Z() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-L-Z"), 0); }
#[test] fn painting_marker_orient_eq_auto_on_M_L() { assert_eq!(render("tests/painting/marker/orient=auto-on-M-L"), 0); }
#[test] fn painting_marker_percent_values() { assert_eq!(render("tests/painting/marker/percent-values"), 0); }
#[test] fn painting_marker_recursive_1() { assert_eq!(render("tests/painting/marker/recursive-1"), 0); }
#[test] fn painting_marker_recursive_2() { assert_eq!(render("tests/painting/marker/recursive-2"), 0); }
#[test] fn painting_marker_recursive_3() { assert_eq!(render("tests/painting/marker/recursive-3"), 0); }
#[test] fn painting_marker_recursive_4() { assert_eq!(render("tests/painting/marker/recursive-4"), 0); }
#[test] fn painting_marker_recursive_5() { assert_eq!(render("tests/painting/marker/recursive-5"), 0); }
#[test] fn painting_marker_target_with_subpaths_1() { assert_eq!(render("tests/painting/marker/target-with-subpaths-1"), 0); }
#[test] fn painting_marker_target_with_subpaths_2() { assert_eq!(render("tests/painting/marker/target-with-subpaths-2"), 0); }
#[test] fn painting_marker_the_marker_property_in_CSS() { assert_eq!(render("tests/painting/marker/the-marker-property-in-CSS"), 0); }
#[test] fn painting_marker_the_marker_property() { assert_eq!(render("tests/painting/marker/the-marker-property"), 0); }
#[test] fn painting_marker_with_a_large_stroke() { assert_eq!(render("tests/painting/marker/with-a-large-stroke"), 0); }
#[test] fn painting_marker_with_a_text_child() { assert_eq!(render("tests/painting/marker/with-a-text-child"), 0); }
#[test] fn painting_marker_with_an_image_child() { assert_eq!(render("tests/painting/marker/with-an-image-child"), 0); }
#[test] fn painting_marker_with_invalid_markerUnits() { assert_eq!(render("tests/painting/marker/with-invalid-markerUnits"), 0); }
#[test] fn painting_marker_with_markerUnits_eq_userSpaceOnUse() { assert_eq!(render("tests/painting/marker/with-markerUnits=userSpaceOnUse"), 0); }
#[test] fn painting_marker_with_viewBox_1() { assert_eq!(render("tests/painting/marker/with-viewBox-1"), 0); }
#[test] fn painting_marker_with_viewBox_2() { assert_eq!(render("tests/painting/marker/with-viewBox-2"), 0); }
#[test] fn painting_marker_zero_length_path_1() { assert_eq!(render("tests/painting/marker/zero-length-path-1"), 0); }
#[test] fn painting_marker_zero_length_path_2() { assert_eq!(render("tests/painting/marker/zero-length-path-2"), 0); }
#[test] fn painting_marker_zero_sized_stroke() { assert_eq!(render("tests/painting/marker/zero-sized-stroke"), 0); }
#[test] fn painting_marker_zero_sized() { assert_eq!(render("tests/painting/marker/zero-sized"), 0); }
#[test] fn painting_mix_blend_mode_as_property() { assert_eq!(render("tests/painting/mix-blend-mode/as-property"), 0); }
#[test] fn painting_mix_blend_mode_color_burn() { assert_eq!(render("tests/painting/mix-blend-mode/color-burn"), 0); }
#[test] fn painting_mix_blend_mode_color_dodge() { assert_eq!(render("tests/painting/mix-blend-mode/color-dodge"), 0); }
#[test] fn painting_mix_blend_mode_color() { assert_eq!(render("tests/painting/mix-blend-mode/color"), 0); }
#[test] fn painting_mix_blend_mode_darken() { assert_eq!(render("tests/painting/mix-blend-mode/darken"), 0); }
#[test] fn painting_mix_blend_mode_difference() { assert_eq!(render("tests/painting/mix-blend-mode/difference"), 0); }
#[test] fn painting_mix_blend_mode_exclusion() { assert_eq!(render("tests/painting/mix-blend-mode/exclusion"), 0); }
#[test] fn painting_mix_blend_mode_hard_light() { assert_eq!(render("tests/painting/mix-blend-mode/hard-light"), 0); }
#[test] fn painting_mix_blend_mode_hue() { assert_eq!(render("tests/painting/mix-blend-mode/hue"), 0); }
#[test] fn painting_mix_blend_mode_lighten() { assert_eq!(render("tests/painting/mix-blend-mode/lighten"), 0); }
#[test] fn painting_mix_blend_mode_luminosity() { assert_eq!(render("tests/painting/mix-blend-mode/luminosity"), 0); }
#[test] fn painting_mix_blend_mode_multiply() { assert_eq!(render("tests/painting/mix-blend-mode/multiply"), 0); }
#[test] fn painting_mix_blend_mode_normal() { assert_eq!(render("tests/painting/mix-blend-mode/normal"), 0); }
#[test] fn painting_mix_blend_mode_opacity_on_element() { assert_eq!(render("tests/painting/mix-blend-mode/opacity-on-element"), 0); }
#[test] fn painting_mix_blend_mode_opacity_on_group() { assert_eq!(render("tests/painting/mix-blend-mode/opacity-on-group"), 0); }
#[test] fn painting_mix_blend_mode_overlay() { assert_eq!(render("tests/painting/mix-blend-mode/overlay"), 0); }
#[test] fn painting_mix_blend_mode_saturation() { assert_eq!(render("tests/painting/mix-blend-mode/saturation"), 0); }
#[test] fn painting_mix_blend_mode_screen() { assert_eq!(render("tests/painting/mix-blend-mode/screen"), 0); }
#[test] fn painting_mix_blend_mode_soft_light() { assert_eq!(render("tests/painting/mix-blend-mode/soft-light"), 0); }
#[test] fn painting_mix_blend_mode_xor() { assert_eq!(render("tests/painting/mix-blend-mode/xor"), 0); }
#[test] fn painting_opacity_50percent() { assert_eq!(render("tests/painting/opacity/50percent"), 0); }
#[test] fn painting_opacity_bBox_impact() { assert_eq!(render("tests/painting/opacity/bBox-impact"), 0); }
#[test] fn painting_opacity_clamp_value_1() { assert_eq!(render("tests/painting/opacity/clamp-value-1"), 0); }
#[test] fn painting_opacity_clamp_value_2() { assert_eq!(render("tests/painting/opacity/clamp-value-2"), 0); }
#[test] fn painting_opacity_group_opacity() { assert_eq!(render("tests/painting/opacity/group-opacity"), 0); }
#[test] fn painting_opacity_invalid_value_2() { assert_eq!(render("tests/painting/opacity/invalid-value-2"), 0); }
#[test] fn painting_opacity_mixed_group_opacity() { assert_eq!(render("tests/painting/opacity/mixed-group-opacity"), 0); }
#[test] fn painting_opacity_on_an_invalid_element() { assert_eq!(render("tests/painting/opacity/on-an-invalid-element"), 0); }
#[test] fn painting_opacity_on_the_root_svg() { assert_eq!(render("tests/painting/opacity/on-the-root-svg"), 0); }
#[test] fn painting_overflow_auto_on_marker() { assert_eq!(render("tests/painting/overflow/auto-on-marker"), 0); }
#[test] fn painting_overflow_inherit_on_marker_without_parent() { assert_eq!(render("tests/painting/overflow/inherit-on-marker-without-parent"), 0); }
#[test] fn painting_overflow_inherit_on_marker() { assert_eq!(render("tests/painting/overflow/inherit-on-marker"), 0); }
#[test] fn painting_overflow_scroll_on_marker() { assert_eq!(render("tests/painting/overflow/scroll-on-marker"), 0); }
#[test] fn painting_overflow_visible_on_marker() { assert_eq!(render("tests/painting/overflow/visible-on-marker"), 0); }
#[test] fn painting_paint_order_duplicates() { assert_eq!(render("tests/painting/paint-order/duplicates"), 0); }
#[test] fn painting_paint_order_fill_markers_stroke() { assert_eq!(render("tests/painting/paint-order/fill-markers-stroke"), 0); }
#[test] fn painting_paint_order_fill() { assert_eq!(render("tests/painting/paint-order/fill"), 0); }
#[test] fn painting_paint_order_invalid() { assert_eq!(render("tests/painting/paint-order/invalid"), 0); }
#[test] fn painting_paint_order_markers_stroke() { assert_eq!(render("tests/painting/paint-order/markers-stroke"), 0); }
#[test] fn painting_paint_order_markers() { assert_eq!(render("tests/painting/paint-order/markers"), 0); }
#[test] fn painting_paint_order_normal() { assert_eq!(render("tests/painting/paint-order/normal"), 0); }
#[test] fn painting_paint_order_on_text() { assert_eq!(render("tests/painting/paint-order/on-text"), 0); }
#[test] fn painting_paint_order_on_tspan() { assert_eq!(render("tests/painting/paint-order/on-tspan"), 0); }
#[test] fn painting_paint_order_stroke_invalid() { assert_eq!(render("tests/painting/paint-order/stroke-invalid"), 0); }
#[test] fn painting_paint_order_stroke_markers() { assert_eq!(render("tests/painting/paint-order/stroke-markers"), 0); }
#[test] fn painting_paint_order_stroke() { assert_eq!(render("tests/painting/paint-order/stroke"), 0); }
#[test] fn painting_paint_order_trailing_data() { assert_eq!(render("tests/painting/paint-order/trailing-data"), 0); }
#[test] fn painting_shape_rendering_auto_on_circle() { assert_eq!(render("tests/painting/shape-rendering/auto-on-circle"), 0); }
#[test] fn painting_shape_rendering_crispEdges_on_circle() { assert_eq!(render("tests/painting/shape-rendering/crispEdges-on-circle"), 0); }
#[test] fn painting_shape_rendering_geometricPrecision_on_circle() { assert_eq!(render("tests/painting/shape-rendering/geometricPrecision-on-circle"), 0); }
#[test] fn painting_shape_rendering_inheritance() { assert_eq!(render("tests/painting/shape-rendering/inheritance"), 0); }
#[test] fn painting_shape_rendering_on_horizontal_line() { assert_eq!(render("tests/painting/shape-rendering/on-horizontal-line"), 0); }
#[test] fn painting_shape_rendering_optimizeSpeed_on_circle() { assert_eq!(render("tests/painting/shape-rendering/optimizeSpeed-on-circle"), 0); }
#[test] fn painting_shape_rendering_optimizeSpeed_on_text() { assert_eq!(render("tests/painting/shape-rendering/optimizeSpeed-on-text"), 0); }
#[test] fn painting_shape_rendering_path_with_marker() { assert_eq!(render("tests/painting/shape-rendering/path-with-marker"), 0); }
#[test] fn painting_stroke_control_points_clamping_1() { assert_eq!(render("tests/painting/stroke/control-points-clamping-1"), 0); }
#[test] fn painting_stroke_control_points_clamping_2() { assert_eq!(render("tests/painting/stroke/control-points-clamping-2"), 0); }
#[test] fn painting_stroke_currentColor_without_a_parent() { assert_eq!(render("tests/painting/stroke/currentColor-without-a-parent"), 0); }
#[test] fn painting_stroke_funcIRI_to_unsupported_element() { assert_eq!(render("tests/painting/stroke/funcIRI-to-unsupported-element"), 0); }
#[test] fn painting_stroke_gradient_with_objectBoundingBox_and_fallback_on_lines() { assert_eq!(render("tests/painting/stroke/gradient-with-objectBoundingBox-and-fallback-on-lines"), 0); }
#[test] fn painting_stroke_gradient_with_objectBoundingBox_on_path_without_a_bbox_1() { assert_eq!(render("tests/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-1"), 0); }
#[test] fn painting_stroke_gradient_with_objectBoundingBox_on_path_without_a_bbox_2() { assert_eq!(render("tests/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-2"), 0); }
#[test] fn painting_stroke_gradient_with_objectBoundingBox_on_shape_without_a_bbox() { assert_eq!(render("tests/painting/stroke/gradient-with-objectBoundingBox-on-shape-without-a-bbox"), 0); }
#[test] fn painting_stroke_line_as_curve_1() { assert_eq!(render("tests/painting/stroke/line-as-curve-1"), 0); }
#[test] fn painting_stroke_line_as_curve_2() { assert_eq!(render("tests/painting/stroke/line-as-curve-2"), 0); }
#[test] fn painting_stroke_linear_gradient_on_text() { assert_eq!(render("tests/painting/stroke/linear-gradient-on-text"), 0); }
#[test] fn painting_stroke_linear_gradient() { assert_eq!(render("tests/painting/stroke/linear-gradient"), 0); }
#[test] fn painting_stroke_named_color() { assert_eq!(render("tests/painting/stroke/named-color"), 0); }
#[test] fn painting_stroke_none() { assert_eq!(render("tests/painting/stroke/none"), 0); }
#[test] fn painting_stroke_pattern_on_text() { assert_eq!(render("tests/painting/stroke/pattern-on-text"), 0); }
#[test] fn painting_stroke_pattern_with_objectBoundingBox_fallback_on_zero_bbox_shape() { assert_eq!(render("tests/painting/stroke/pattern-with-objectBoundingBox-fallback-on-zero-bbox-shape"), 0); }
#[test] fn painting_stroke_pattern_with_objectBoundingBox_on_zero_bbox_shape() { assert_eq!(render("tests/painting/stroke/pattern-with-objectBoundingBox-on-zero-bbox-shape"), 0); }
#[test] fn painting_stroke_pattern() { assert_eq!(render("tests/painting/stroke/pattern"), 0); }
#[test] fn painting_stroke_radial_gradient_on_text() { assert_eq!(render("tests/painting/stroke/radial-gradient-on-text"), 0); }
#[test] fn painting_stroke_radial_gradient() { assert_eq!(render("tests/painting/stroke/radial-gradient"), 0); }
#[test] fn painting_stroke_dasharray_0_n_with_butt_caps() { assert_eq!(render("tests/painting/stroke-dasharray/0-n-with-butt-caps"), 0); }
#[test] fn painting_stroke_dasharray_0_n_with_round_caps() { assert_eq!(render("tests/painting/stroke-dasharray/0-n-with-round-caps"), 0); }
#[test] fn painting_stroke_dasharray_0_n_with_square_caps() { assert_eq!(render("tests/painting/stroke-dasharray/0-n-with-square-caps"), 0); }
#[test] fn painting_stroke_dasharray_comma_ws_separator() { assert_eq!(render("tests/painting/stroke-dasharray/comma-ws-separator"), 0); }
#[test] fn painting_stroke_dasharray_em_units() { assert_eq!(render("tests/painting/stroke-dasharray/em-units"), 0); }
#[test] fn painting_stroke_dasharray_even_count() { assert_eq!(render("tests/painting/stroke-dasharray/even-count"), 0); }
#[test] fn painting_stroke_dasharray_mm_units() { assert_eq!(render("tests/painting/stroke-dasharray/mm-units"), 0); }
#[test] fn painting_stroke_dasharray_multiple_subpaths() { assert_eq!(render("tests/painting/stroke-dasharray/multiple-subpaths"), 0); }
#[test] fn painting_stroke_dasharray_n_0() { assert_eq!(render("tests/painting/stroke-dasharray/n-0"), 0); }
#[test] fn painting_stroke_dasharray_negative_sum() { assert_eq!(render("tests/painting/stroke-dasharray/negative-sum"), 0); }
#[test] fn painting_stroke_dasharray_negative_values() { assert_eq!(render("tests/painting/stroke-dasharray/negative-values"), 0); }
#[test] fn painting_stroke_dasharray_none() { assert_eq!(render("tests/painting/stroke-dasharray/none"), 0); }
#[test] fn painting_stroke_dasharray_odd_count() { assert_eq!(render("tests/painting/stroke-dasharray/odd-count"), 0); }
#[test] fn painting_stroke_dasharray_on_a_circle() { assert_eq!(render("tests/painting/stroke-dasharray/on-a-circle"), 0); }
#[test] fn painting_stroke_dasharray_percent_units() { assert_eq!(render("tests/painting/stroke-dasharray/percent-units"), 0); }
#[test] fn painting_stroke_dasharray_ws_separator() { assert_eq!(render("tests/painting/stroke-dasharray/ws-separator"), 0); }
#[test] fn painting_stroke_dasharray_zero_sum() { assert_eq!(render("tests/painting/stroke-dasharray/zero-sum"), 0); }
#[test] fn painting_stroke_dashoffset_default() { assert_eq!(render("tests/painting/stroke-dashoffset/default"), 0); }
#[test] fn painting_stroke_dashoffset_em_units() { assert_eq!(render("tests/painting/stroke-dashoffset/em-units"), 0); }
#[test] fn painting_stroke_dashoffset_mm_units() { assert_eq!(render("tests/painting/stroke-dashoffset/mm-units"), 0); }
#[test] fn painting_stroke_dashoffset_negative_value() { assert_eq!(render("tests/painting/stroke-dashoffset/negative-value"), 0); }
#[test] fn painting_stroke_dashoffset_percent_units() { assert_eq!(render("tests/painting/stroke-dashoffset/percent-units"), 0); }
#[test] fn painting_stroke_dashoffset_px_units() { assert_eq!(render("tests/painting/stroke-dashoffset/px-units"), 0); }
#[test] fn painting_stroke_linecap_butt() { assert_eq!(render("tests/painting/stroke-linecap/butt"), 0); }
#[test] fn painting_stroke_linecap_open_path_with_butt() { assert_eq!(render("tests/painting/stroke-linecap/open-path-with-butt"), 0); }
#[test] fn painting_stroke_linecap_open_path_with_round() { assert_eq!(render("tests/painting/stroke-linecap/open-path-with-round"), 0); }
#[test] fn painting_stroke_linecap_open_path_with_square() { assert_eq!(render("tests/painting/stroke-linecap/open-path-with-square"), 0); }
#[test] fn painting_stroke_linecap_round() { assert_eq!(render("tests/painting/stroke-linecap/round"), 0); }
#[test] fn painting_stroke_linecap_square() { assert_eq!(render("tests/painting/stroke-linecap/square"), 0); }
#[test] fn painting_stroke_linecap_zero_length_path_with_butt() { assert_eq!(render("tests/painting/stroke-linecap/zero-length-path-with-butt"), 0); }
#[test] fn painting_stroke_linecap_zero_length_path_with_round() { assert_eq!(render("tests/painting/stroke-linecap/zero-length-path-with-round"), 0); }
#[test] fn painting_stroke_linecap_zero_length_path_with_square() { assert_eq!(render("tests/painting/stroke-linecap/zero-length-path-with-square"), 0); }
#[test] fn painting_stroke_linejoin_arcs() { assert_eq!(render("tests/painting/stroke-linejoin/arcs"), 0); }
#[test] fn painting_stroke_linejoin_bevel() { assert_eq!(render("tests/painting/stroke-linejoin/bevel"), 0); }
#[test] fn painting_stroke_linejoin_miter_clip() { assert_eq!(render("tests/painting/stroke-linejoin/miter-clip"), 0); }
#[test] fn painting_stroke_linejoin_miter() { assert_eq!(render("tests/painting/stroke-linejoin/miter"), 0); }
#[test] fn painting_stroke_linejoin_round() { assert_eq!(render("tests/painting/stroke-linejoin/round"), 0); }
#[test] fn painting_stroke_miterlimit_default() { assert_eq!(render("tests/painting/stroke-miterlimit/default"), 0); }
#[test] fn painting_stroke_miterlimit_invalid_value() { assert_eq!(render("tests/painting/stroke-miterlimit/invalid-value"), 0); }
#[test] fn painting_stroke_miterlimit_valid_value() { assert_eq!(render("tests/painting/stroke-miterlimit/valid-value"), 0); }
#[test] fn painting_stroke_miterlimit_value_with_mm() { assert_eq!(render("tests/painting/stroke-miterlimit/value-with-mm"), 0); }
#[test] fn painting_stroke_miterlimit_value_with_percent() { assert_eq!(render("tests/painting/stroke-miterlimit/value-with-percent"), 0); }
#[test] fn painting_stroke_opacity_50percent() { assert_eq!(render("tests/painting/stroke-opacity/50percent"), 0); }
#[test] fn painting_stroke_opacity_half_opacity() { assert_eq!(render("tests/painting/stroke-opacity/half-opacity"), 0); }
#[test] fn painting_stroke_opacity_nested() { assert_eq!(render("tests/painting/stroke-opacity/nested"), 0); }
#[test] fn painting_stroke_opacity_on_parent() { assert_eq!(render("tests/painting/stroke-opacity/on-parent"), 0); }
#[test] fn painting_stroke_opacity_on_text() { assert_eq!(render("tests/painting/stroke-opacity/on-text"), 0); }
#[test] fn painting_stroke_opacity_with_linearGradient() { assert_eq!(render("tests/painting/stroke-opacity/with-linearGradient"), 0); }
#[test] fn painting_stroke_opacity_with_opacity() { assert_eq!(render("tests/painting/stroke-opacity/with-opacity"), 0); }
#[test] fn painting_stroke_opacity_with_pattern() { assert_eq!(render("tests/painting/stroke-opacity/with-pattern"), 0); }
#[test] fn painting_stroke_width_bold() { assert_eq!(render("tests/painting/stroke-width/bold"), 0); }
#[test] fn painting_stroke_width_default() { assert_eq!(render("tests/painting/stroke-width/default"), 0); }
#[test] fn painting_stroke_width_negative() { assert_eq!(render("tests/painting/stroke-width/negative"), 0); }
#[test] fn painting_stroke_width_percentage() { assert_eq!(render("tests/painting/stroke-width/percentage"), 0); }
#[test] fn painting_stroke_width_zero() { assert_eq!(render("tests/painting/stroke-width/zero"), 0); }
#[test] fn painting_visibility_bbox_impact_1() { assert_eq!(render("tests/painting/visibility/bbox-impact-1"), 0); }
#[test] fn painting_visibility_bbox_impact_2() { assert_eq!(render("tests/painting/visibility/bbox-impact-2"), 0); }
#[test] fn painting_visibility_bbox_impact_3() { assert_eq!(render("tests/painting/visibility/bbox-impact-3"), 0); }
#[test] fn painting_visibility_collapse_on_tspan() { assert_eq!(render("tests/painting/visibility/collapse-on-tspan"), 0); }
#[test] fn painting_visibility_hidden_on_group() { assert_eq!(render("tests/painting/visibility/hidden-on-group"), 0); }
#[test] fn painting_visibility_hidden_on_shape() { assert_eq!(render("tests/painting/visibility/hidden-on-shape"), 0); }
#[test] fn painting_visibility_hidden_on_tspan() { assert_eq!(render("tests/painting/visibility/hidden-on-tspan"), 0); }
#[test] fn shapes_circle_missing_cx_and_cy_attributes() { assert_eq!(render("tests/shapes/circle/missing-cx-and-cy-attributes"), 0); }
#[test] fn shapes_circle_missing_cx_attribute() { assert_eq!(render("tests/shapes/circle/missing-cx-attribute"), 0); }
#[test] fn shapes_circle_missing_cy_attribute() { assert_eq!(render("tests/shapes/circle/missing-cy-attribute"), 0); }
#[test] fn shapes_circle_missing_r_attribute() { assert_eq!(render("tests/shapes/circle/missing-r-attribute"), 0); }
#[test] fn shapes_circle_negative_r_attribute() { assert_eq!(render("tests/shapes/circle/negative-r-attribute"), 0); }
#[test] fn shapes_circle_simple_case() { assert_eq!(render("tests/shapes/circle/simple-case"), 0); }
#[test] fn shapes_ellipse_missing_cx_and_cy_attributes() { assert_eq!(render("tests/shapes/ellipse/missing-cx-and-cy-attributes"), 0); }
#[test] fn shapes_ellipse_missing_cx_attribute() { assert_eq!(render("tests/shapes/ellipse/missing-cx-attribute"), 0); }
#[test] fn shapes_ellipse_missing_cy_attribute() { assert_eq!(render("tests/shapes/ellipse/missing-cy-attribute"), 0); }
#[test] fn shapes_ellipse_missing_rx_and_ry_attributes() { assert_eq!(render("tests/shapes/ellipse/missing-rx-and-ry-attributes"), 0); }
#[test] fn shapes_ellipse_missing_rx_attribute() { assert_eq!(render("tests/shapes/ellipse/missing-rx-attribute"), 0); }
#[test] fn shapes_ellipse_missing_ry_attribute() { assert_eq!(render("tests/shapes/ellipse/missing-ry-attribute"), 0); }
#[test] fn shapes_ellipse_negative_rx_and_ry_attributes() { assert_eq!(render("tests/shapes/ellipse/negative-rx-and-ry-attributes"), 0); }
#[test] fn shapes_ellipse_negative_rx_attribute() { assert_eq!(render("tests/shapes/ellipse/negative-rx-attribute"), 0); }
#[test] fn shapes_ellipse_negative_ry_attribute() { assert_eq!(render("tests/shapes/ellipse/negative-ry-attribute"), 0); }
#[test] fn shapes_ellipse_percent_values_missing_ry() { assert_eq!(render("tests/shapes/ellipse/percent-values-missing-ry"), 0); }
#[test] fn shapes_ellipse_percent_values() { assert_eq!(render("tests/shapes/ellipse/percent-values"), 0); }
#[test] fn shapes_ellipse_simple_case() { assert_eq!(render("tests/shapes/ellipse/simple-case"), 0); }
#[test] fn shapes_line_no_coordinates() { assert_eq!(render("tests/shapes/line/no-coordinates"), 0); }
#[test] fn shapes_line_no_x1_and_y1_coordinates() { assert_eq!(render("tests/shapes/line/no-x1-and-y1-coordinates"), 0); }
#[test] fn shapes_line_no_x1_coordinate() { assert_eq!(render("tests/shapes/line/no-x1-coordinate"), 0); }
#[test] fn shapes_line_no_x2_and_y2_coordinates() { assert_eq!(render("tests/shapes/line/no-x2-and-y2-coordinates"), 0); }
#[test] fn shapes_line_no_x2_coordinate() { assert_eq!(render("tests/shapes/line/no-x2-coordinate"), 0); }
#[test] fn shapes_line_no_y1_coordinate() { assert_eq!(render("tests/shapes/line/no-y1-coordinate"), 0); }
#[test] fn shapes_line_no_y2_coordinate() { assert_eq!(render("tests/shapes/line/no-y2-coordinate"), 0); }
#[test] fn shapes_line_percent_units() { assert_eq!(render("tests/shapes/line/percent-units"), 0); }
#[test] fn shapes_line_simple_case() { assert_eq!(render("tests/shapes/line/simple-case"), 0); }
#[test] fn shapes_line_with_transform() { assert_eq!(render("tests/shapes/line/with-transform"), 0); }
#[test] fn shapes_path_A() { assert_eq!(render("tests/shapes/path/A"), 0); }
#[test] fn shapes_path_M_A_trimmed() { assert_eq!(render("tests/shapes/path/M-A-trimmed"), 0); }
#[test] fn shapes_path_M_A() { assert_eq!(render("tests/shapes/path/M-A"), 0); }
#[test] fn shapes_path_M_C_S() { assert_eq!(render("tests/shapes/path/M-C-S"), 0); }
#[test] fn shapes_path_M_C() { assert_eq!(render("tests/shapes/path/M-C"), 0); }
#[test] fn shapes_path_M_H_H_implicit() { assert_eq!(render("tests/shapes/path/M-H-H-implicit"), 0); }
#[test] fn shapes_path_M_H_H() { assert_eq!(render("tests/shapes/path/M-H-H"), 0); }
#[test] fn shapes_path_M_H() { assert_eq!(render("tests/shapes/path/M-H"), 0); }
#[test] fn shapes_path_M_L_L_Z_rel() { assert_eq!(render("tests/shapes/path/M-L-L-Z-rel"), 0); }
#[test] fn shapes_path_M_L_L_Z() { assert_eq!(render("tests/shapes/path/M-L-L-Z"), 0); }
#[test] fn shapes_path_M_L_L_implicit() { assert_eq!(render("tests/shapes/path/M-L-L-implicit"), 0); }
#[test] fn shapes_path_M_L_M_L() { assert_eq!(render("tests/shapes/path/M-L-M-L"), 0); }
#[test] fn shapes_path_M_L_M_Z() { assert_eq!(render("tests/shapes/path/M-L-M-Z"), 0); }
#[test] fn shapes_path_M_L_M() { assert_eq!(render("tests/shapes/path/M-L-M"), 0); }
#[test] fn shapes_path_M_L_Z_A() { assert_eq!(render("tests/shapes/path/M-L-Z-A"), 0); }
#[test] fn shapes_path_M_L_Z_L_L() { assert_eq!(render("tests/shapes/path/M-L-Z-L-L"), 0); }
#[test] fn shapes_path_M_L() { assert_eq!(render("tests/shapes/path/M-L"), 0); }
#[test] fn shapes_path_M_M_implicit_M_implicit() { assert_eq!(render("tests/shapes/path/M-M-implicit-M-implicit"), 0); }
#[test] fn shapes_path_M_M_rel() { assert_eq!(render("tests/shapes/path/M-M-rel"), 0); }
#[test] fn shapes_path_M_M() { assert_eq!(render("tests/shapes/path/M-M"), 0); }
#[test] fn shapes_path_M_Q_T_rel() { assert_eq!(render("tests/shapes/path/M-Q-T-rel"), 0); }
#[test] fn shapes_path_M_Q_T() { assert_eq!(render("tests/shapes/path/M-Q-T"), 0); }
#[test] fn shapes_path_M_Q_rel_T_rel() { assert_eq!(render("tests/shapes/path/M-Q-rel-T-rel"), 0); }
#[test] fn shapes_path_M_Q() { assert_eq!(render("tests/shapes/path/M-Q"), 0); }
#[test] fn shapes_path_M_S_S() { assert_eq!(render("tests/shapes/path/M-S-S"), 0); }
#[test] fn shapes_path_M_S() { assert_eq!(render("tests/shapes/path/M-S"), 0); }
#[test] fn shapes_path_M_T_Q_rel() { assert_eq!(render("tests/shapes/path/M-T-Q-rel"), 0); }
#[test] fn shapes_path_M_T_Q() { assert_eq!(render("tests/shapes/path/M-T-Q"), 0); }
#[test] fn shapes_path_M_T_S_rel() { assert_eq!(render("tests/shapes/path/M-T-S-rel"), 0); }
#[test] fn shapes_path_M_T_S() { assert_eq!(render("tests/shapes/path/M-T-S"), 0); }
#[test] fn shapes_path_M_T_T_rel() { assert_eq!(render("tests/shapes/path/M-T-T-rel"), 0); }
#[test] fn shapes_path_M_T_T() { assert_eq!(render("tests/shapes/path/M-T-T"), 0); }
#[test] fn shapes_path_M_T() { assert_eq!(render("tests/shapes/path/M-T"), 0); }
#[test] fn shapes_path_M_V_V_implicit() { assert_eq!(render("tests/shapes/path/M-V-V-implicit"), 0); }
#[test] fn shapes_path_M_V_V() { assert_eq!(render("tests/shapes/path/M-V-V"), 0); }
#[test] fn shapes_path_M_V() { assert_eq!(render("tests/shapes/path/M-V"), 0); }
#[test] fn shapes_path_M_Z() { assert_eq!(render("tests/shapes/path/M-Z"), 0); }
#[test] fn shapes_path_M_rel_M_rel_implicit_M_rel_implicit() { assert_eq!(render("tests/shapes/path/M-rel-M-rel-implicit-M-rel-implicit"), 0); }
#[test] fn shapes_path_M_rel_M() { assert_eq!(render("tests/shapes/path/M-rel-M"), 0); }
#[test] fn shapes_path_M() { assert_eq!(render("tests/shapes/path/M"), 0); }
#[test] fn shapes_path_empty() { assert_eq!(render("tests/shapes/path/empty"), 0); }
#[test] fn shapes_path_extra_spaces() { assert_eq!(render("tests/shapes/path/extra-spaces"), 0); }
#[test] fn shapes_path_invalid_data_in_L() { assert_eq!(render("tests/shapes/path/invalid-data-in-L"), 0); }
#[test] fn shapes_path_invalid_transform() { assert_eq!(render("tests/shapes/path/invalid-transform"), 0); }
#[test] fn shapes_path_missing_coordinate_in_L() { assert_eq!(render("tests/shapes/path/missing-coordinate-in-L"), 0); }
#[test] fn shapes_path_multi_line_data() { assert_eq!(render("tests/shapes/path/multi-line-data"), 0); }
#[test] fn shapes_path_negative_large_arc_flag_value() { assert_eq!(render("tests/shapes/path/negative-large-arc-flag-value"), 0); }
#[test] fn shapes_path_negative_sweep_flag_value() { assert_eq!(render("tests/shapes/path/negative-sweep-flag-value"), 0); }
#[test] fn shapes_path_no_commawsp_after_sweep_flag() { assert_eq!(render("tests/shapes/path/no-commawsp-after-sweep-flag"), 0); }
#[test] fn shapes_path_no_commawsp_before_arc_flags() { assert_eq!(render("tests/shapes/path/no-commawsp-before-arc-flags"), 0); }
#[test] fn shapes_path_no_commawsp_between_and_after_arc_flags() { assert_eq!(render("tests/shapes/path/no-commawsp-between-and-after-arc-flags"), 0); }
#[test] fn shapes_path_no_commawsp_between_arc_flags() { assert_eq!(render("tests/shapes/path/no-commawsp-between-arc-flags"), 0); }
#[test] fn shapes_path_numeric_character_references() { assert_eq!(render("tests/shapes/path/numeric-character-references"), 0); }
#[test] fn shapes_path_out_of_range_large_arc_flag_value() { assert_eq!(render("tests/shapes/path/out-of-range-large-arc-flag-value"), 0); }
#[test] fn shapes_path_out_of_range_sweep_flag_value() { assert_eq!(render("tests/shapes/path/out-of-range-sweep-flag-value"), 0); }
#[test] fn shapes_polygon_ignore_odd_points() { assert_eq!(render("tests/shapes/polygon/ignore-odd-points"), 0); }
#[test] fn shapes_polygon_missing_points_attribute() { assert_eq!(render("tests/shapes/polygon/missing-points-attribute"), 0); }
#[test] fn shapes_polygon_not_enough_points() { assert_eq!(render("tests/shapes/polygon/not-enough-points"), 0); }
#[test] fn shapes_polygon_simple_case() { assert_eq!(render("tests/shapes/polygon/simple-case"), 0); }
#[test] fn shapes_polygon_stop_processing_on_invalid_data() { assert_eq!(render("tests/shapes/polygon/stop-processing-on-invalid-data"), 0); }
#[test] fn shapes_polyline_ignore_odd_points() { assert_eq!(render("tests/shapes/polyline/ignore-odd-points"), 0); }
#[test] fn shapes_polyline_missing_points_attribute() { assert_eq!(render("tests/shapes/polyline/missing-points-attribute"), 0); }
#[test] fn shapes_polyline_not_enough_points() { assert_eq!(render("tests/shapes/polyline/not-enough-points"), 0); }
#[test] fn shapes_polyline_simple_case() { assert_eq!(render("tests/shapes/polyline/simple-case"), 0); }
#[test] fn shapes_polyline_stop_processing_on_invalid_data() { assert_eq!(render("tests/shapes/polyline/stop-processing-on-invalid-data"), 0); }
#[test] fn shapes_rect_cap_values() { assert_eq!(render("tests/shapes/rect/cap-values"), 0); }
#[test] fn shapes_rect_ch_values() { assert_eq!(render("tests/shapes/rect/ch-values"), 0); }
#[test] fn shapes_rect_em_values() { assert_eq!(render("tests/shapes/rect/em-values"), 0); }
#[test] fn shapes_rect_ex_values() { assert_eq!(render("tests/shapes/rect/ex-values"), 0); }
#[test] fn shapes_rect_ic_values() { assert_eq!(render("tests/shapes/rect/ic-values"), 0); }
#[test] fn shapes_rect_invalid_coordinates() { assert_eq!(render("tests/shapes/rect/invalid-coordinates"), 0); }
#[test] fn shapes_rect_invalid_length() { assert_eq!(render("tests/shapes/rect/invalid-length"), 0); }
#[test] fn shapes_rect_lh_values() { assert_eq!(render("tests/shapes/rect/lh-values"), 0); }
#[test] fn shapes_rect_missing_height_attribute_processing() { assert_eq!(render("tests/shapes/rect/missing-height-attribute-processing"), 0); }
#[test] fn shapes_rect_missing_width_attribute_processing() { assert_eq!(render("tests/shapes/rect/missing-width-attribute-processing"), 0); }
#[test] fn shapes_rect_mm_values() { assert_eq!(render("tests/shapes/rect/mm-values"), 0); }
#[test] fn shapes_rect_negative_height_attribute_processing() { assert_eq!(render("tests/shapes/rect/negative-height-attribute-processing"), 0); }
#[test] fn shapes_rect_negative_rx_and_ry_attributes_resolving() { assert_eq!(render("tests/shapes/rect/negative-rx-and-ry-attributes-resolving"), 0); }
#[test] fn shapes_rect_negative_rx_attribute_resolving() { assert_eq!(render("tests/shapes/rect/negative-rx-attribute-resolving"), 0); }
#[test] fn shapes_rect_negative_ry_attribute_resolving() { assert_eq!(render("tests/shapes/rect/negative-ry-attribute-resolving"), 0); }
#[test] fn shapes_rect_negative_width_attribute_processing() { assert_eq!(render("tests/shapes/rect/negative-width-attribute-processing"), 0); }
#[test] fn shapes_rect_percentage_values_1() { assert_eq!(render("tests/shapes/rect/percentage-values-1"), 0); }
#[test] fn shapes_rect_percentage_values_2() { assert_eq!(render("tests/shapes/rect/percentage-values-2"), 0); }
#[test] fn shapes_rect_q_values() { assert_eq!(render("tests/shapes/rect/q-values"), 0); }
#[test] fn shapes_rect_rem_values() { assert_eq!(render("tests/shapes/rect/rem-values"), 0); }
#[test] fn shapes_rect_rlh_values() { assert_eq!(render("tests/shapes/rect/rlh-values"), 0); }
#[test] fn shapes_rect_rounded_rect() { assert_eq!(render("tests/shapes/rect/rounded-rect"), 0); }
#[test] fn shapes_rect_rx_and_ry_attributes_clamping_order() { assert_eq!(render("tests/shapes/rect/rx-and-ry-attributes-clamping-order"), 0); }
#[test] fn shapes_rect_rx_attribute_clamping() { assert_eq!(render("tests/shapes/rect/rx-attribute-clamping"), 0); }
#[test] fn shapes_rect_rx_attribute_resolving() { assert_eq!(render("tests/shapes/rect/rx-attribute-resolving"), 0); }
#[test] fn shapes_rect_ry_attribute_clamping() { assert_eq!(render("tests/shapes/rect/ry-attribute-clamping"), 0); }
#[test] fn shapes_rect_ry_attribute_resolving() { assert_eq!(render("tests/shapes/rect/ry-attribute-resolving"), 0); }
#[test] fn shapes_rect_simple_case() { assert_eq!(render("tests/shapes/rect/simple-case"), 0); }
#[test] fn shapes_rect_vi_and_vb_values() { assert_eq!(render("tests/shapes/rect/vi-and-vb-values"), 0); }
#[test] fn shapes_rect_vmin_and_vmax_values() { assert_eq!(render("tests/shapes/rect/vmin-and-vmax-values"), 0); }
#[test] fn shapes_rect_vw_and_vh_values() { assert_eq!(render("tests/shapes/rect/vw-and-vh-values"), 0); }
#[test] fn shapes_rect_with_child() { assert_eq!(render("tests/shapes/rect/with-child"), 0); }
#[test] fn shapes_rect_x_attribute_resolving() { assert_eq!(render("tests/shapes/rect/x-attribute-resolving"), 0); }
#[test] fn shapes_rect_y_attribute_resolving() { assert_eq!(render("tests/shapes/rect/y-attribute-resolving"), 0); }
#[test] fn shapes_rect_zero_height_attribute_processing() { assert_eq!(render("tests/shapes/rect/zero-height-attribute-processing"), 0); }
#[test] fn shapes_rect_zero_rx_attribute_resolving() { assert_eq!(render("tests/shapes/rect/zero-rx-attribute-resolving"), 0); }
#[test] fn shapes_rect_zero_ry_attribute_resolving() { assert_eq!(render("tests/shapes/rect/zero-ry-attribute-resolving"), 0); }
#[test] fn shapes_rect_zero_width_attribute_processing() { assert_eq!(render("tests/shapes/rect/zero-width-attribute-processing"), 0); }
#[test] fn structure_a_inside_text() { assert_eq!(render("tests/structure/a/inside-text"), 0); }
#[test] fn structure_a_inside_tspan() { assert_eq!(render("tests/structure/a/inside-tspan"), 0); }
#[test] fn structure_a_on_shape() { assert_eq!(render("tests/structure/a/on-shape"), 0); }
#[test] fn structure_a_on_text() { assert_eq!(render("tests/structure/a/on-text"), 0); }
#[test] fn structure_a_on_tspan() { assert_eq!(render("tests/structure/a/on-tspan"), 0); }
#[test] fn structure_defs_ignore_shapes_inside_defs() { assert_eq!(render("tests/structure/defs/ignore-shapes-inside-defs"), 0); }
#[test] fn structure_defs_multiple_defs() { assert_eq!(render("tests/structure/defs/multiple-defs"), 0); }
#[test] fn structure_defs_nested_defs() { assert_eq!(render("tests/structure/defs/nested-defs"), 0); }
#[test] fn structure_defs_out_of_order() { assert_eq!(render("tests/structure/defs/out-of-order"), 0); }
#[test] fn structure_defs_simple_case() { assert_eq!(render("tests/structure/defs/simple-case"), 0); }
#[test] fn structure_defs_style_inheritance_on_text() { assert_eq!(render("tests/structure/defs/style-inheritance-on-text"), 0); }
#[test] fn structure_defs_style_inheritance() { assert_eq!(render("tests/structure/defs/style-inheritance"), 0); }
#[test] fn structure_g_deeply_nested_groups() { assert_eq!(render("tests/structure/g/deeply-nested-groups"), 0); }
#[test] fn structure_g_recursive_inheritance() { assert_eq!(render("tests/structure/g/recursive-inheritance"), 0); }
#[test] fn structure_image_embedded_16bit_png() { assert_eq!(render("tests/structure/image/embedded-16bit-png"), 0); }
#[test] fn structure_image_embedded_gif() { assert_eq!(render("tests/structure/image/embedded-gif"), 0); }
#[test] fn structure_image_embedded_jpeg_as_image_jpeg() { assert_eq!(render("tests/structure/image/embedded-jpeg-as-image-jpeg"), 0); }
#[test] fn structure_image_embedded_jpeg_as_image_jpg() { assert_eq!(render("tests/structure/image/embedded-jpeg-as-image-jpg"), 0); }
#[test] fn structure_image_embedded_jpeg_without_mime() { assert_eq!(render("tests/structure/image/embedded-jpeg-without-mime"), 0); }
#[test] fn structure_image_embedded_png() { assert_eq!(render("tests/structure/image/embedded-png"), 0); }
#[test] fn structure_image_embedded_svg_without_mime() { assert_eq!(render("tests/structure/image/embedded-svg-without-mime"), 0); }
#[test] fn structure_image_embedded_svg() { assert_eq!(render("tests/structure/image/embedded-svg"), 0); }
#[test] fn structure_image_embedded_svgz() { assert_eq!(render("tests/structure/image/embedded-svgz"), 0); }
#[test] fn structure_image_external_gif() { assert_eq!(render("tests/structure/image/external-gif"), 0); }
#[test] fn structure_image_external_jpeg() { assert_eq!(render("tests/structure/image/external-jpeg"), 0); }
#[test] fn structure_image_external_png() { assert_eq!(render("tests/structure/image/external-png"), 0); }
#[test] fn structure_image_external_svg_with_transform() { assert_eq!(render("tests/structure/image/external-svg-with-transform"), 0); }
#[test] fn structure_image_external_svg() { assert_eq!(render("tests/structure/image/external-svg"), 0); }
#[test] fn structure_image_external_svgz() { assert_eq!(render("tests/structure/image/external-svgz"), 0); }
#[test] fn structure_image_float_size() { assert_eq!(render("tests/structure/image/float-size"), 0); }
#[test] fn structure_image_image_with_float_size_scaling() { assert_eq!(render("tests/structure/image/image-with-float-size-scaling"), 0); }
#[test] fn structure_image_no_height_on_svg() { assert_eq!(render("tests/structure/image/no-height-on-svg"), 0); }
#[test] fn structure_image_no_height() { assert_eq!(render("tests/structure/image/no-height"), 0); }
#[test] fn structure_image_no_width_and_height_on_svg() { assert_eq!(render("tests/structure/image/no-width-and-height-on-svg"), 0); }
#[test] fn structure_image_no_width_and_height() { assert_eq!(render("tests/structure/image/no-width-and-height"), 0); }
#[test] fn structure_image_no_width_on_svg() { assert_eq!(render("tests/structure/image/no-width-on-svg"), 0); }
#[test] fn structure_image_no_width() { assert_eq!(render("tests/structure/image/no-width"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_none_on_svg() { assert_eq!(render("tests/structure/image/preserveAspectRatio=none-on-svg"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_none() { assert_eq!(render("tests/structure/image/preserveAspectRatio=none"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMaxYMax_meet_on_svg() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMaxYMax-meet-on-svg"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMaxYMax_meet() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMaxYMax-meet"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMaxYMax_slice_on_svg() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMaxYMax-slice-on-svg"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMaxYMax_slice() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMaxYMax-slice"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMidYMid_meet_on_svg() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMidYMid-meet-on-svg"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMidYMid_meet() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMidYMid-meet"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMidYMid_slice_on_svg() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMidYMid-slice-on-svg"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMidYMid_slice() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMidYMid-slice"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMinYMin_meet_on_svg() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMinYMin-meet-on-svg"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMinYMin_meet() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMinYMin-meet"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMinYMin_slice_on_svg() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMinYMin-slice-on-svg"), 0); }
#[test] fn structure_image_preserveAspectRatio_eq_xMinYMin_slice() { assert_eq!(render("tests/structure/image/preserveAspectRatio=xMinYMin-slice"), 0); }
#[test] fn structure_image_raster_image_and_size_with_odd_numbers() { assert_eq!(render("tests/structure/image/raster-image-and-size-with-odd-numbers"), 0); }
#[test] fn structure_image_recursive_1() { assert_eq!(render("tests/structure/image/recursive-1"), 0); }
#[test] fn structure_image_recursive_2() { assert_eq!(render("tests/structure/image/recursive-2"), 0); }
#[test] fn structure_image_url_to_png() { assert_eq!(render("tests/structure/image/url-to-png"), 0); }
#[test] fn structure_image_url_to_svg() { assert_eq!(render("tests/structure/image/url-to-svg"), 0); }
#[test] fn structure_image_width_and_height_set_to_auto() { assert_eq!(render("tests/structure/image/width-and-height-set-to-auto"), 0); }
#[test] fn structure_image_with_transform() { assert_eq!(render("tests/structure/image/with-transform"), 0); }
#[test] fn structure_image_with_zero_width_and_height() { assert_eq!(render("tests/structure/image/with-zero-width-and-height"), 0); }
#[test] fn structure_image_zero_height() { assert_eq!(render("tests/structure/image/zero-height"), 0); }
#[test] fn structure_image_zero_width() { assert_eq!(render("tests/structure/image/zero-width"), 0); }
#[test] fn structure_style_attribute_selector() { assert_eq!(render("tests/structure/style/attribute-selector"), 0); }
#[test] fn structure_style_class_selector() { assert_eq!(render("tests/structure/style/class-selector"), 0); }
#[test] fn structure_style_combined_selectors() { assert_eq!(render("tests/structure/style/combined-selectors"), 0); }
#[test] fn structure_style_external_CSS() { assert_eq!(render("tests/structure/style/external-CSS"), 0); }
#[test] fn structure_style_iD_selector() { assert_eq!(render("tests/structure/style/iD-selector"), 0); }
#[test] fn structure_style_important() { assert_eq!(render("tests/structure/style/important"), 0); }
#[test] fn structure_style_invalid_type() { assert_eq!(render("tests/structure/style/invalid-type"), 0); }
#[test] fn structure_style_non_presentational_attribute() { assert_eq!(render("tests/structure/style/non-presentational-attribute"), 0); }
#[test] fn structure_style_resolve_order() { assert_eq!(render("tests/structure/style/resolve-order"), 0); }
#[test] fn structure_style_rule_specificity() { assert_eq!(render("tests/structure/style/rule-specificity"), 0); }
#[test] fn structure_style_style_after_usage() { assert_eq!(render("tests/structure/style/style-after-usage"), 0); }
#[test] fn structure_style_style_inside_CDATA() { assert_eq!(render("tests/structure/style/style-inside-CDATA"), 0); }
#[test] fn structure_style_transform() { assert_eq!(render("tests/structure/style/transform"), 0); }
#[test] fn structure_style_type_selector() { assert_eq!(render("tests/structure/style/type-selector"), 0); }
#[test] fn structure_style_universal_selector() { assert_eq!(render("tests/structure/style/universal-selector"), 0); }
#[test] fn structure_style_unresolved_class_selector() { assert_eq!(render("tests/structure/style/unresolved-class-selector"), 0); }
#[test] fn structure_style_attribute_comments() { assert_eq!(render("tests/structure/style-attribute/comments"), 0); }
#[test] fn structure_style_attribute_non_presentational_attribute() { assert_eq!(render("tests/structure/style-attribute/non-presentational-attribute"), 0); }
#[test] fn structure_style_attribute_simple_case() { assert_eq!(render("tests/structure/style-attribute/simple-case"), 0); }
#[test] fn structure_style_attribute_transform() { assert_eq!(render("tests/structure/style-attribute/transform"), 0); }
#[test] fn structure_svg_attribute_value_via_ENTITY_reference() { assert_eq!(render("tests/structure/svg/attribute-value-via-ENTITY-reference"), 0); }
#[test] fn structure_svg_deeply_nested_svg() { assert_eq!(render("tests/structure/svg/deeply-nested-svg"), 0); }
#[test] fn structure_svg_elements_via_ENTITY_reference_1() { assert_eq!(render("tests/structure/svg/elements-via-ENTITY-reference-1"), 0); }
#[test] fn structure_svg_elements_via_ENTITY_reference_2() { assert_eq!(render("tests/structure/svg/elements-via-ENTITY-reference-2"), 0); }
#[test] fn structure_svg_elements_via_ENTITY_reference_3() { assert_eq!(render("tests/structure/svg/elements-via-ENTITY-reference-3"), 0); }
#[test] fn structure_svg_explicit_svg_namespace() { assert_eq!(render("tests/structure/svg/explicit-svg-namespace"), 0); }
#[test] fn structure_svg_funcIRI_parsing() { assert_eq!(render("tests/structure/svg/funcIRI-parsing"), 0); }
#[test] fn structure_svg_funcIRI_with_invalid_characters() { assert_eq!(render("tests/structure/svg/funcIRI-with-invalid-characters"), 0); }
#[test] fn structure_svg_invalid_id_attribute_1() { assert_eq!(render("tests/structure/svg/invalid-id-attribute-1"), 0); }
#[test] fn structure_svg_invalid_id_attribute_2() { assert_eq!(render("tests/structure/svg/invalid-id-attribute-2"), 0); }
#[test] fn structure_svg_mixed_namespaces() { assert_eq!(render("tests/structure/svg/mixed-namespaces"), 0); }
#[test] fn structure_svg_nested_svg_one_with_rect_and_one_with_viewBox() { assert_eq!(render("tests/structure/svg/nested-svg-one-with-rect-and-one-with-viewBox"), 0); }
#[test] fn structure_svg_nested_svg_with_overflow_auto() { assert_eq!(render("tests/structure/svg/nested-svg-with-overflow-auto"), 0); }
#[test] fn structure_svg_nested_svg_with_overflow_visible() { assert_eq!(render("tests/structure/svg/nested-svg-with-overflow-visible"), 0); }
#[test] fn structure_svg_nested_svg_with_rect_and_percent_values() { assert_eq!(render("tests/structure/svg/nested-svg-with-rect-and-percent-values"), 0); }
#[test] fn structure_svg_nested_svg_with_rect_and_viewBox_1() { assert_eq!(render("tests/structure/svg/nested-svg-with-rect-and-viewBox-1"), 0); }
#[test] fn structure_svg_nested_svg_with_rect_and_viewBox_2() { assert_eq!(render("tests/structure/svg/nested-svg-with-rect-and-viewBox-2"), 0); }
#[test] fn structure_svg_nested_svg_with_rect_and_viewBox_3() { assert_eq!(render("tests/structure/svg/nested-svg-with-rect-and-viewBox-3"), 0); }
#[test] fn structure_svg_nested_svg_with_rect_and_viewBox_and_percent_values() { assert_eq!(render("tests/structure/svg/nested-svg-with-rect-and-viewBox-and-percent-values"), 0); }
#[test] fn structure_svg_nested_svg_with_rect() { assert_eq!(render("tests/structure/svg/nested-svg-with-rect"), 0); }
#[test] fn structure_svg_nested_svg_with_relative_width_and_height() { assert_eq!(render("tests/structure/svg/nested-svg-with-relative-width-and-height"), 0); }
#[test] fn structure_svg_nested_svg_with_viewBox_and_percent_values() { assert_eq!(render("tests/structure/svg/nested-svg-with-viewBox-and-percent-values"), 0); }
#[test] fn structure_svg_nested_svg_with_viewBox() { assert_eq!(render("tests/structure/svg/nested-svg-with-viewBox"), 0); }
#[test] fn structure_svg_nested_svg() { assert_eq!(render("tests/structure/svg/nested-svg"), 0); }
#[test] fn structure_svg_no_children() { assert_eq!(render("tests/structure/svg/no-children"), 0); }
#[test] fn structure_svg_preserveAspectRatio_with_viewBox_not_at_zero_pos() { assert_eq!(render("tests/structure/svg/preserveAspectRatio-with-viewBox-not-at-zero-pos"), 0); }
#[test] fn structure_svg_preserveAspectRatio_eq_none() { assert_eq!(render("tests/structure/svg/preserveAspectRatio=none"), 0); }
#[test] fn structure_svg_preserveAspectRatio_eq_xMaxYMax_slice() { assert_eq!(render("tests/structure/svg/preserveAspectRatio=xMaxYMax-slice"), 0); }
#[test] fn structure_svg_preserveAspectRatio_eq_xMaxYMax() { assert_eq!(render("tests/structure/svg/preserveAspectRatio=xMaxYMax"), 0); }
#[test] fn structure_svg_preserveAspectRatio_eq_xMidYMid_slice() { assert_eq!(render("tests/structure/svg/preserveAspectRatio=xMidYMid-slice"), 0); }
#[test] fn structure_svg_preserveAspectRatio_eq_xMidYMid() { assert_eq!(render("tests/structure/svg/preserveAspectRatio=xMidYMid"), 0); }
#[test] fn structure_svg_preserveAspectRatio_eq_xMinYMin_slice() { assert_eq!(render("tests/structure/svg/preserveAspectRatio=xMinYMin-slice"), 0); }
#[test] fn structure_svg_preserveAspectRatio_eq_xMinYMin() { assert_eq!(render("tests/structure/svg/preserveAspectRatio=xMinYMin"), 0); }
#[test] fn structure_svg_proportional_viewBox() { assert_eq!(render("tests/structure/svg/proportional-viewBox"), 0); }
#[test] fn structure_svg_rect_inside_a_non_SVG_element() { assert_eq!(render("tests/structure/svg/rect-inside-a-non-SVG-element"), 0); }
#[test] fn structure_svg_viewBox_not_at_zero_pos() { assert_eq!(render("tests/structure/svg/viewBox-not-at-zero-pos"), 0); }
#[test] fn structure_svg_xmlns_validation() { assert_eq!(render("tests/structure/svg/xmlns-validation"), 0); }
#[test] fn structure_switch_comment_as_first_child() { assert_eq!(render("tests/structure/switch/comment-as-first-child"), 0); }
#[test] fn structure_switch_display_none_on_child() { assert_eq!(render("tests/structure/switch/display-none-on-child"), 0); }
#[test] fn structure_switch_non_SVG_child() { assert_eq!(render("tests/structure/switch/non-SVG-child"), 0); }
#[test] fn structure_switch_requiredFeatures() { assert_eq!(render("tests/structure/switch/requiredFeatures"), 0); }
#[test] fn structure_switch_simple_case() { assert_eq!(render("tests/structure/switch/simple-case"), 0); }
#[test] fn structure_switch_single_child() { assert_eq!(render("tests/structure/switch/single-child"), 0); }
#[test] fn structure_switch_systemLanguage() { assert_eq!(render("tests/structure/switch/systemLanguage"), 0); }
#[test] fn structure_switch_systemLanguage_eq_en_GB() { assert_eq!(render("tests/structure/switch/systemLanguage=en-GB"), 0); }
#[test] fn structure_switch_systemLanguage_eq_en_US() { assert_eq!(render("tests/structure/switch/systemLanguage=en-US"), 0); }
#[test] fn structure_switch_systemLanguage_eq_en() { assert_eq!(render("tests/structure/switch/systemLanguage=en"), 0); }
#[test] fn structure_switch_systemLanguage_eq_ru_Ru() { assert_eq!(render("tests/structure/switch/systemLanguage=ru-Ru"), 0); }
#[test] fn structure_switch_systemLanguage_eq_ru_en() { assert_eq!(render("tests/structure/switch/systemLanguage=ru-en"), 0); }
#[test] fn structure_switch_with_attributes() { assert_eq!(render("tests/structure/switch/with-attributes"), 0); }
#[test] fn structure_symbol_content_outside_the_viewbox() { assert_eq!(render("tests/structure/symbol/content-outside-the-viewbox"), 0); }
#[test] fn structure_symbol_indirect_symbol_reference() { assert_eq!(render("tests/structure/symbol/indirect-symbol-reference"), 0); }
#[test] fn structure_symbol_opacity_on_symbol_with_viewBox() { assert_eq!(render("tests/structure/symbol/opacity-on-symbol-with-viewBox"), 0); }
#[test] fn structure_symbol_opacity_on_symbol() { assert_eq!(render("tests/structure/symbol/opacity-on-symbol"), 0); }
#[test] fn structure_symbol_opacity_on_use_and_symbol() { assert_eq!(render("tests/structure/symbol/opacity-on-use-and-symbol"), 0); }
#[test] fn structure_symbol_opacity_on_use() { assert_eq!(render("tests/structure/symbol/opacity-on-use"), 0); }
#[test] fn structure_symbol_simple_case() { assert_eq!(render("tests/structure/symbol/simple-case"), 0); }
#[test] fn structure_symbol_unused_symbol() { assert_eq!(render("tests/structure/symbol/unused-symbol"), 0); }
#[test] fn structure_symbol_with_custom_use_size() { assert_eq!(render("tests/structure/symbol/with-custom-use-size"), 0); }
#[test] fn structure_symbol_with_overflow_visible() { assert_eq!(render("tests/structure/symbol/with-overflow-visible"), 0); }
#[test] fn structure_symbol_with_transform_on_use_no_size() { assert_eq!(render("tests/structure/symbol/with-transform-on-use-no-size"), 0); }
#[test] fn structure_symbol_with_transform_on_use() { assert_eq!(render("tests/structure/symbol/with-transform-on-use"), 0); }
#[test] fn structure_symbol_with_transform() { assert_eq!(render("tests/structure/symbol/with-transform"), 0); }
#[test] fn structure_symbol_with_viewBox_and_custom_use_rect() { assert_eq!(render("tests/structure/symbol/with-viewBox-and-custom-use-rect"), 0); }
#[test] fn structure_symbol_with_viewBox_and_custom_use_size() { assert_eq!(render("tests/structure/symbol/with-viewBox-and-custom-use-size"), 0); }
#[test] fn structure_symbol_with_viewBox() { assert_eq!(render("tests/structure/symbol/with-viewBox"), 0); }
#[test] fn structure_systemLanguage_en_GB() { assert_eq!(render("tests/structure/systemLanguage/en-GB"), 0); }
#[test] fn structure_systemLanguage_en_US() { assert_eq!(render("tests/structure/systemLanguage/en-US"), 0); }
#[test] fn structure_systemLanguage_en() { assert_eq!(render("tests/structure/systemLanguage/en"), 0); }
#[test] fn structure_systemLanguage_on_clipPath() { assert_eq!(render("tests/structure/systemLanguage/on-clipPath"), 0); }
#[test] fn structure_systemLanguage_on_defs() { assert_eq!(render("tests/structure/systemLanguage/on-defs"), 0); }
#[test] fn structure_systemLanguage_on_linearGradient() { assert_eq!(render("tests/structure/systemLanguage/on-linearGradient"), 0); }
#[test] fn structure_systemLanguage_on_svg() { assert_eq!(render("tests/structure/systemLanguage/on-svg"), 0); }
#[test] fn structure_systemLanguage_on_tspan() { assert_eq!(render("tests/structure/systemLanguage/on-tspan"), 0); }
#[test] fn structure_systemLanguage_ru_Ru() { assert_eq!(render("tests/structure/systemLanguage/ru-Ru"), 0); }
#[test] fn structure_systemLanguage_ru_en() { assert_eq!(render("tests/structure/systemLanguage/ru-en"), 0); }
#[test] fn structure_transform_default() { assert_eq!(render("tests/structure/transform/default"), 0); }
#[test] fn structure_transform_direct_transform() { assert_eq!(render("tests/structure/transform/direct-transform"), 0); }
#[test] fn structure_transform_empty() { assert_eq!(render("tests/structure/transform/empty"), 0); }
#[test] fn structure_transform_extra_spaces() { assert_eq!(render("tests/structure/transform/extra-spaces"), 0); }
#[test] fn structure_transform_matrix_no_commas() { assert_eq!(render("tests/structure/transform/matrix-no-commas"), 0); }
#[test] fn structure_transform_matrix() { assert_eq!(render("tests/structure/transform/matrix"), 0); }
#[test] fn structure_transform_nested_transforms_1() { assert_eq!(render("tests/structure/transform/nested-transforms-1"), 0); }
#[test] fn structure_transform_nested_transforms_2() { assert_eq!(render("tests/structure/transform/nested-transforms-2"), 0); }
#[test] fn structure_transform_numeric_character_references() { assert_eq!(render("tests/structure/transform/numeric-character-references"), 0); }
#[test] fn structure_transform_rotate_at_position() { assert_eq!(render("tests/structure/transform/rotate-at-position"), 0); }
#[test] fn structure_transform_rotate() { assert_eq!(render("tests/structure/transform/rotate"), 0); }
#[test] fn structure_transform_scale_without_Y() { assert_eq!(render("tests/structure/transform/scale-without-Y"), 0); }
#[test] fn structure_transform_scale() { assert_eq!(render("tests/structure/transform/scale"), 0); }
#[test] fn structure_transform_skewX() { assert_eq!(render("tests/structure/transform/skewX"), 0); }
#[test] fn structure_transform_skewY() { assert_eq!(render("tests/structure/transform/skewY"), 0); }
#[test] fn structure_transform_transform_list() { assert_eq!(render("tests/structure/transform/transform-list"), 0); }
#[test] fn structure_transform_translate_out_of_view() { assert_eq!(render("tests/structure/transform/translate-out-of-view"), 0); }
#[test] fn structure_transform_translate_without_Y() { assert_eq!(render("tests/structure/transform/translate-without-Y"), 0); }
#[test] fn structure_transform_translate() { assert_eq!(render("tests/structure/transform/translate"), 0); }
#[test] fn structure_transform_zeroed_matrix() { assert_eq!(render("tests/structure/transform/zeroed-matrix"), 0); }
#[test] fn structure_use_cSS_rules() { assert_eq!(render("tests/structure/use/cSS-rules"), 0); }
#[test] fn structure_use_complex_style_resolving_order() { assert_eq!(render("tests/structure/use/complex-style-resolving-order"), 0); }
#[test] fn structure_use_display_inheritance() { assert_eq!(render("tests/structure/use/display-inheritance"), 0); }
#[test] fn structure_use_duplicated_IDs() { assert_eq!(render("tests/structure/use/duplicated-IDs"), 0); }
#[test] fn structure_use_fill_opacity_inheritance() { assert_eq!(render("tests/structure/use/fill-opacity-inheritance"), 0); }
#[test] fn structure_use_from_defs() { assert_eq!(render("tests/structure/use/from-defs"), 0); }
#[test] fn structure_use_href_without_the_xlink_namespace() { assert_eq!(render("tests/structure/use/href-without-the-xlink-namespace"), 0); }
#[test] fn structure_use_indirect_recursive_1() { assert_eq!(render("tests/structure/use/indirect-recursive-1"), 0); }
#[test] fn structure_use_indirect_recursive_2() { assert_eq!(render("tests/structure/use/indirect-recursive-2"), 0); }
#[test] fn structure_use_indirect_recursive_3() { assert_eq!(render("tests/structure/use/indirect-recursive-3"), 0); }
#[test] fn structure_use_indirect() { assert_eq!(render("tests/structure/use/indirect"), 0); }
#[test] fn structure_use_nested_recursive_1() { assert_eq!(render("tests/structure/use/nested-recursive-1"), 0); }
#[test] fn structure_use_nested_recursive_2() { assert_eq!(render("tests/structure/use/nested-recursive-2"), 0); }
#[test] fn structure_use_nested_xlink_to_svg_element_with_rect_and_size() { assert_eq!(render("tests/structure/use/nested-xlink-to-svg-element-with-rect-and-size"), 0); }
#[test] fn structure_use_non_linear_order() { assert_eq!(render("tests/structure/use/non-linear-order"), 0); }
#[test] fn structure_use_opacity_inheritance() { assert_eq!(render("tests/structure/use/opacity-inheritance"), 0); }
#[test] fn structure_use_position_inheritance() { assert_eq!(render("tests/structure/use/position-inheritance"), 0); }
#[test] fn structure_use_recursive() { assert_eq!(render("tests/structure/use/recursive"), 0); }
#[test] fn structure_use_self_recursive() { assert_eq!(render("tests/structure/use/self-recursive"), 0); }
#[test] fn structure_use_simple_case() { assert_eq!(render("tests/structure/use/simple-case"), 0); }
#[test] fn structure_use_stroke_opacity_inheritance() { assert_eq!(render("tests/structure/use/stroke-opacity-inheritance"), 0); }
#[test] fn structure_use_style_inheritance_1() { assert_eq!(render("tests/structure/use/style-inheritance-1"), 0); }
#[test] fn structure_use_style_inheritance_2() { assert_eq!(render("tests/structure/use/style-inheritance-2"), 0); }
#[test] fn structure_use_style_inheritance_3() { assert_eq!(render("tests/structure/use/style-inheritance-3"), 0); }
#[test] fn structure_use_transform_attribute_1() { assert_eq!(render("tests/structure/use/transform-attribute-1"), 0); }
#[test] fn structure_use_transform_attribute_2() { assert_eq!(render("tests/structure/use/transform-attribute-2"), 0); }
#[test] fn structure_use_transform_inheritance() { assert_eq!(render("tests/structure/use/transform-inheritance"), 0); }
#[test] fn structure_use_with_currentColor() { assert_eq!(render("tests/structure/use/with-currentColor"), 0); }
#[test] fn structure_use_with_size() { assert_eq!(render("tests/structure/use/with-size"), 0); }
#[test] fn structure_use_xlink_to_a_child_of_a_non_SVG_element() { assert_eq!(render("tests/structure/use/xlink-to-a-child-of-a-non-SVG-element"), 0); }
#[test] fn structure_use_xlink_to_a_child_of_an_invalid_element() { assert_eq!(render("tests/structure/use/xlink-to-a-child-of-an-invalid-element"), 0); }
#[test] fn structure_use_xlink_to_an_external_file() { assert_eq!(render("tests/structure/use/xlink-to-an-external-file"), 0); }
#[test] fn structure_use_xlink_to_an_invalid_element_1() { assert_eq!(render("tests/structure/use/xlink-to-an-invalid-element-1"), 0); }
#[test] fn structure_use_xlink_to_an_invalid_element_2() { assert_eq!(render("tests/structure/use/xlink-to-an-invalid-element-2"), 0); }
#[test] fn structure_use_xlink_to_an_invalid_element_3() { assert_eq!(render("tests/structure/use/xlink-to-an-invalid-element-3"), 0); }
#[test] fn structure_use_xlink_to_svg_element_with_rect_only_width() { assert_eq!(render("tests/structure/use/xlink-to-svg-element-with-rect-only-width"), 0); }
#[test] fn structure_use_xlink_to_svg_element_with_rect() { assert_eq!(render("tests/structure/use/xlink-to-svg-element-with-rect"), 0); }
#[test] fn structure_use_xlink_to_svg_element_with_viewBox() { assert_eq!(render("tests/structure/use/xlink-to-svg-element-with-viewBox"), 0); }
#[test] fn structure_use_xlink_to_svg_element_with_width_height_on_use() { assert_eq!(render("tests/structure/use/xlink-to-svg-element-with-width-height-on-use"), 0); }
#[test] fn structure_use_xlink_to_svg_element_with_x_y_on_use() { assert_eq!(render("tests/structure/use/xlink-to-svg-element-with-x-y-on-use"), 0); }
#[test] fn structure_use_xlink_to_svg_element() { assert_eq!(render("tests/structure/use/xlink-to-svg-element"), 0); }
#[test] fn text_alignment_baseline_after_edge() { assert_eq!(render("tests/text/alignment-baseline/after-edge"), 0); }
#[test] fn text_alignment_baseline_alphabetic() { assert_eq!(render("tests/text/alignment-baseline/alphabetic"), 0); }
#[test] fn text_alignment_baseline_auto() { assert_eq!(render("tests/text/alignment-baseline/auto"), 0); }
#[test] fn text_alignment_baseline_baseline() { assert_eq!(render("tests/text/alignment-baseline/baseline"), 0); }
#[test] fn text_alignment_baseline_before_edge() { assert_eq!(render("tests/text/alignment-baseline/before-edge"), 0); }
#[test] fn text_alignment_baseline_central() { assert_eq!(render("tests/text/alignment-baseline/central"), 0); }
#[test] fn text_alignment_baseline_hanging_and_baseline_shift_eq_20_on_tspan() { assert_eq!(render("tests/text/alignment-baseline/hanging-and-baseline-shift-eq-20-on-tspan"), 0); }
#[test] fn text_alignment_baseline_hanging_on_tspan() { assert_eq!(render("tests/text/alignment-baseline/hanging-on-tspan"), 0); }
#[test] fn text_alignment_baseline_hanging_on_vertical() { assert_eq!(render("tests/text/alignment-baseline/hanging-on-vertical"), 0); }
#[test] fn text_alignment_baseline_hanging_with_underline() { assert_eq!(render("tests/text/alignment-baseline/hanging-with-underline"), 0); }
#[test] fn text_alignment_baseline_hanging() { assert_eq!(render("tests/text/alignment-baseline/hanging"), 0); }
#[test] fn text_alignment_baseline_ideographic() { assert_eq!(render("tests/text/alignment-baseline/ideographic"), 0); }
#[test] fn text_alignment_baseline_inherit() { assert_eq!(render("tests/text/alignment-baseline/inherit"), 0); }
#[test] fn text_alignment_baseline_mathematical() { assert_eq!(render("tests/text/alignment-baseline/mathematical"), 0); }
#[test] fn text_alignment_baseline_middle_on_textPath() { assert_eq!(render("tests/text/alignment-baseline/middle-on-textPath"), 0); }
#[test] fn text_alignment_baseline_middle() { assert_eq!(render("tests/text/alignment-baseline/middle"), 0); }
#[test] fn text_alignment_baseline_text_after_edge() { assert_eq!(render("tests/text/alignment-baseline/text-after-edge"), 0); }
#[test] fn text_alignment_baseline_text_before_edge() { assert_eq!(render("tests/text/alignment-baseline/text-before-edge"), 0); }
#[test] fn text_alignment_baseline_two_textPath_with_middle_on_first() { assert_eq!(render("tests/text/alignment-baseline/two-textPath-with-middle-on-first"), 0); }
#[test] fn text_baseline_shift__10() { assert_eq!(render("tests/text/baseline-shift/-10"), 0); }
#[test] fn text_baseline_shift__50percent() { assert_eq!(render("tests/text/baseline-shift/-50percent"), 0); }
#[test] fn text_baseline_shift_0() { assert_eq!(render("tests/text/baseline-shift/0"), 0); }
#[test] fn text_baseline_shift_10() { assert_eq!(render("tests/text/baseline-shift/10"), 0); }
#[test] fn text_baseline_shift_2mm() { assert_eq!(render("tests/text/baseline-shift/2mm"), 0); }
#[test] fn text_baseline_shift_50percent() { assert_eq!(render("tests/text/baseline-shift/50percent"), 0); }
#[test] fn text_baseline_shift_baseline() { assert_eq!(render("tests/text/baseline-shift/baseline"), 0); }
#[test] fn text_baseline_shift_deeply_nested_super() { assert_eq!(render("tests/text/baseline-shift/deeply-nested-super"), 0); }
#[test] fn text_baseline_shift_inheritance_1() { assert_eq!(render("tests/text/baseline-shift/inheritance-1"), 0); }
#[test] fn text_baseline_shift_inheritance_2() { assert_eq!(render("tests/text/baseline-shift/inheritance-2"), 0); }
#[test] fn text_baseline_shift_inheritance_3() { assert_eq!(render("tests/text/baseline-shift/inheritance-3"), 0); }
#[test] fn text_baseline_shift_inheritance_4() { assert_eq!(render("tests/text/baseline-shift/inheritance-4"), 0); }
#[test] fn text_baseline_shift_inheritance_5() { assert_eq!(render("tests/text/baseline-shift/inheritance-5"), 0); }
#[test] fn text_baseline_shift_invalid_value() { assert_eq!(render("tests/text/baseline-shift/invalid-value"), 0); }
#[test] fn text_baseline_shift_mixed_nested() { assert_eq!(render("tests/text/baseline-shift/mixed-nested"), 0); }
#[test] fn text_baseline_shift_nested_length() { assert_eq!(render("tests/text/baseline-shift/nested-length"), 0); }
#[test] fn text_baseline_shift_nested_super() { assert_eq!(render("tests/text/baseline-shift/nested-super"), 0); }
#[test] fn text_baseline_shift_nested_with_baseline_1() { assert_eq!(render("tests/text/baseline-shift/nested-with-baseline-1"), 0); }
#[test] fn text_baseline_shift_nested_with_baseline_2() { assert_eq!(render("tests/text/baseline-shift/nested-with-baseline-2"), 0); }
#[test] fn text_baseline_shift_sub() { assert_eq!(render("tests/text/baseline-shift/sub"), 0); }
#[test] fn text_baseline_shift_super() { assert_eq!(render("tests/text/baseline-shift/super"), 0); }
#[test] fn text_baseline_shift_with_rotate() { assert_eq!(render("tests/text/baseline-shift/with-rotate"), 0); }
#[test] fn text_direction_rtl_with_vertical_writing_mode() { assert_eq!(render("tests/text/direction/rtl-with-vertical-writing-mode"), 0); }
#[test] fn text_direction_rtl() { assert_eq!(render("tests/text/direction/rtl"), 0); }
#[test] fn text_dominant_baseline_alignment_baseline_and_baseline_shift_on_tspans() { assert_eq!(render("tests/text/dominant-baseline/alignment-baseline-and-baseline-shift-on-tspans"), 0); }
#[test] fn text_dominant_baseline_alignment_baseline_eq_baseline_on_tspan() { assert_eq!(render("tests/text/dominant-baseline/alignment-baseline=baseline-on-tspan"), 0); }
#[test] fn text_dominant_baseline_alphabetic() { assert_eq!(render("tests/text/dominant-baseline/alphabetic"), 0); }
#[test] fn text_dominant_baseline_auto() { assert_eq!(render("tests/text/dominant-baseline/auto"), 0); }
#[test] fn text_dominant_baseline_central() { assert_eq!(render("tests/text/dominant-baseline/central"), 0); }
#[test] fn text_dominant_baseline_complex() { assert_eq!(render("tests/text/dominant-baseline/complex"), 0); }
#[test] fn text_dominant_baseline_different_alignment_baseline_on_tspan() { assert_eq!(render("tests/text/dominant-baseline/different-alignment-baseline-on-tspan"), 0); }
#[test] fn text_dominant_baseline_dummy_tspan() { assert_eq!(render("tests/text/dominant-baseline/dummy-tspan"), 0); }
#[test] fn text_dominant_baseline_equal_alignment_baseline_on_tspan() { assert_eq!(render("tests/text/dominant-baseline/equal-alignment-baseline-on-tspan"), 0); }
#[test] fn text_dominant_baseline_hanging() { assert_eq!(render("tests/text/dominant-baseline/hanging"), 0); }
#[test] fn text_dominant_baseline_ideographic() { assert_eq!(render("tests/text/dominant-baseline/ideographic"), 0); }
#[test] fn text_dominant_baseline_inherit() { assert_eq!(render("tests/text/dominant-baseline/inherit"), 0); }
#[test] fn text_dominant_baseline_mathematical() { assert_eq!(render("tests/text/dominant-baseline/mathematical"), 0); }
#[test] fn text_dominant_baseline_middle() { assert_eq!(render("tests/text/dominant-baseline/middle"), 0); }
#[test] fn text_dominant_baseline_nested() { assert_eq!(render("tests/text/dominant-baseline/nested"), 0); }
#[test] fn text_dominant_baseline_no_change() { assert_eq!(render("tests/text/dominant-baseline/no-change"), 0); }
#[test] fn text_dominant_baseline_reset_size() { assert_eq!(render("tests/text/dominant-baseline/reset-size"), 0); }
#[test] fn text_dominant_baseline_sequential() { assert_eq!(render("tests/text/dominant-baseline/sequential"), 0); }
#[test] fn text_dominant_baseline_text_after_edge() { assert_eq!(render("tests/text/dominant-baseline/text-after-edge"), 0); }
#[test] fn text_dominant_baseline_text_before_edge() { assert_eq!(render("tests/text/dominant-baseline/text-before-edge"), 0); }
#[test] fn text_dominant_baseline_use_script() { assert_eq!(render("tests/text/dominant-baseline/use-script"), 0); }
#[test] fn text_font_simple_case() { assert_eq!(render("tests/text/font/simple-case"), 0); }
#[test] fn text_font_family_bold_sans_serif() { assert_eq!(render("tests/text/font-family/bold-sans-serif"), 0); }
#[test] fn text_font_family_cursive() { assert_eq!(render("tests/text/font-family/cursive"), 0); }
#[test] fn text_font_family_double_quoted() { assert_eq!(render("tests/text/font-family/double-quoted"), 0); }
#[test] fn text_font_family_fallback_1() { assert_eq!(render("tests/text/font-family/fallback-1"), 0); }
#[test] fn text_font_family_fallback_2() { assert_eq!(render("tests/text/font-family/fallback-2"), 0); }
#[test] fn text_font_family_fantasy() { assert_eq!(render("tests/text/font-family/fantasy"), 0); }
#[test] fn text_font_family_font_list() { assert_eq!(render("tests/text/font-family/font-list"), 0); }
#[test] fn text_font_family_monospace() { assert_eq!(render("tests/text/font-family/monospace"), 0); }
#[test] fn text_font_family_noto_sans() { assert_eq!(render("tests/text/font-family/noto-sans"), 0); }
#[test] fn text_font_family_sans_serif() { assert_eq!(render("tests/text/font-family/sans-serif"), 0); }
#[test] fn text_font_family_serif() { assert_eq!(render("tests/text/font-family/serif"), 0); }
#[test] fn text_font_family_source_sans_pro() { assert_eq!(render("tests/text/font-family/source-sans-pro"), 0); }
#[test] fn text_font_kerning_arabic_script() { assert_eq!(render("tests/text/font-kerning/arabic-script"), 0); }
#[test] fn text_font_kerning_as_property() { assert_eq!(render("tests/text/font-kerning/as-property"), 0); }
#[test] fn text_font_kerning_none() { assert_eq!(render("tests/text/font-kerning/none"), 0); }
#[test] fn text_font_size_em_nested_and_mixed() { assert_eq!(render("tests/text/font-size/em-nested-and-mixed"), 0); }
#[test] fn text_font_size_em_on_the_root_element() { assert_eq!(render("tests/text/font-size/em-on-the-root-element"), 0); }
#[test] fn text_font_size_em() { assert_eq!(render("tests/text/font-size/em"), 0); }
#[test] fn text_font_size_ex_nested_and_mixed() { assert_eq!(render("tests/text/font-size/ex-nested-and-mixed"), 0); }
#[test] fn text_font_size_ex_on_the_root_element() { assert_eq!(render("tests/text/font-size/ex-on-the-root-element"), 0); }
#[test] fn text_font_size_ex() { assert_eq!(render("tests/text/font-size/ex"), 0); }
#[test] fn text_font_size_inheritance() { assert_eq!(render("tests/text/font-size/inheritance"), 0); }
#[test] fn text_font_size_mixed_values() { assert_eq!(render("tests/text/font-size/mixed-values"), 0); }
#[test] fn text_font_size_named_value_without_a_parent() { assert_eq!(render("tests/text/font-size/named-value-without-a-parent"), 0); }
#[test] fn text_font_size_named_value() { assert_eq!(render("tests/text/font-size/named-value"), 0); }
#[test] fn text_font_size_negative_size() { assert_eq!(render("tests/text/font-size/negative-size"), 0); }
#[test] fn text_font_size_nested_percent_values_1() { assert_eq!(render("tests/text/font-size/nested-percent-values-1"), 0); }
#[test] fn text_font_size_nested_percent_values_2() { assert_eq!(render("tests/text/font-size/nested-percent-values-2"), 0); }
#[test] fn text_font_size_percent_value_without_a_parent() { assert_eq!(render("tests/text/font-size/percent-value-without-a-parent"), 0); }
#[test] fn text_font_size_percent_value() { assert_eq!(render("tests/text/font-size/percent-value"), 0); }
#[test] fn text_font_size_simple_case() { assert_eq!(render("tests/text/font-size/simple-case"), 0); }
#[test] fn text_font_size_zero_size_on_parent_1() { assert_eq!(render("tests/text/font-size/zero-size-on-parent-1"), 0); }
#[test] fn text_font_size_zero_size_on_parent_2() { assert_eq!(render("tests/text/font-size/zero-size-on-parent-2"), 0); }
#[test] fn text_font_size_zero_size_on_parent_3() { assert_eq!(render("tests/text/font-size/zero-size-on-parent-3"), 0); }
#[test] fn text_font_size_zero_size() { assert_eq!(render("tests/text/font-size/zero-size"), 0); }
#[test] fn text_font_size_adjust_simple_case() { assert_eq!(render("tests/text/font-size-adjust/simple-case"), 0); }
#[test] fn text_font_stretch_extra_condensed() { assert_eq!(render("tests/text/font-stretch/extra-condensed"), 0); }
#[test] fn text_font_stretch_inherit() { assert_eq!(render("tests/text/font-stretch/inherit"), 0); }
#[test] fn text_font_stretch_narrower() { assert_eq!(render("tests/text/font-stretch/narrower"), 0); }
#[test] fn text_font_style_inherit() { assert_eq!(render("tests/text/font-style/inherit"), 0); }
#[test] fn text_font_style_italic() { assert_eq!(render("tests/text/font-style/italic"), 0); }
#[test] fn text_font_style_oblique() { assert_eq!(render("tests/text/font-style/oblique"), 0); }
#[test] fn text_font_variant_inherit() { assert_eq!(render("tests/text/font-variant/inherit"), 0); }
#[test] fn text_font_variant_small_caps() { assert_eq!(render("tests/text/font-variant/small-caps"), 0); }
#[test] fn text_font_weight_650() { assert_eq!(render("tests/text/font-weight/650"), 0); }
#[test] fn text_font_weight_700() { assert_eq!(render("tests/text/font-weight/700"), 0); }
#[test] fn text_font_weight_bold() { assert_eq!(render("tests/text/font-weight/bold"), 0); }
#[test] fn text_font_weight_bolder_with_clamping() { assert_eq!(render("tests/text/font-weight/bolder-with-clamping"), 0); }
#[test] fn text_font_weight_bolder_without_parent() { assert_eq!(render("tests/text/font-weight/bolder-without-parent"), 0); }
#[test] fn text_font_weight_bolder() { assert_eq!(render("tests/text/font-weight/bolder"), 0); }
#[test] fn text_font_weight_inherit() { assert_eq!(render("tests/text/font-weight/inherit"), 0); }
#[test] fn text_font_weight_invalid_number_1() { assert_eq!(render("tests/text/font-weight/invalid-number-1"), 0); }
#[test] fn text_font_weight_lighter_with_clamping() { assert_eq!(render("tests/text/font-weight/lighter-with-clamping"), 0); }
#[test] fn text_font_weight_lighter_without_parent() { assert_eq!(render("tests/text/font-weight/lighter-without-parent"), 0); }
#[test] fn text_font_weight_lighter() { assert_eq!(render("tests/text/font-weight/lighter"), 0); }
#[test] fn text_font_weight_normal() { assert_eq!(render("tests/text/font-weight/normal"), 0); }
#[test] fn text_glyph_orientation_horizontal_simple_case() { assert_eq!(render("tests/text/glyph-orientation-horizontal/simple-case"), 0); }
#[test] fn text_glyph_orientation_vertical_simple_case() { assert_eq!(render("tests/text/glyph-orientation-vertical/simple-case"), 0); }
#[test] fn text_kerning_0() { assert_eq!(render("tests/text/kerning/0"), 0); }
#[test] fn text_kerning_10percent() { assert_eq!(render("tests/text/kerning/10percent"), 0); }
#[test] fn text_lengthAdjust_spacingAndGlyphs() { assert_eq!(render("tests/text/lengthAdjust/spacingAndGlyphs"), 0); }
#[test] fn text_lengthAdjust_text_on_path() { assert_eq!(render("tests/text/lengthAdjust/text-on-path"), 0); }
#[test] fn text_lengthAdjust_vertical() { assert_eq!(render("tests/text/lengthAdjust/vertical"), 0); }
#[test] fn text_lengthAdjust_with_underline() { assert_eq!(render("tests/text/lengthAdjust/with-underline"), 0); }
#[test] fn text_letter_spacing__3() { assert_eq!(render("tests/text/letter-spacing/-3"), 0); }
#[test] fn text_letter_spacing_0() { assert_eq!(render("tests/text/letter-spacing/0"), 0); }
#[test] fn text_letter_spacing_1mm() { assert_eq!(render("tests/text/letter-spacing/1mm"), 0); }
#[test] fn text_letter_spacing_3() { assert_eq!(render("tests/text/letter-spacing/3"), 0); }
#[test] fn text_letter_spacing_5percent() { assert_eq!(render("tests/text/letter-spacing/5percent"), 0); }
#[test] fn text_letter_spacing_filter_bbox() { assert_eq!(render("tests/text/letter-spacing/filter-bbox"), 0); }
#[test] fn text_letter_spacing_large_negative() { assert_eq!(render("tests/text/letter-spacing/large-negative"), 0); }
#[test] fn text_letter_spacing_mixed_scripts() { assert_eq!(render("tests/text/letter-spacing/mixed-scripts"), 0); }
#[test] fn text_letter_spacing_mixed_spacing() { assert_eq!(render("tests/text/letter-spacing/mixed-spacing"), 0); }
#[test] fn text_letter_spacing_non_ASCII_character() { assert_eq!(render("tests/text/letter-spacing/non-ASCII-character"), 0); }
#[test] fn text_letter_spacing_normal() { assert_eq!(render("tests/text/letter-spacing/normal"), 0); }
#[test] fn text_letter_spacing_on_Arabic() { assert_eq!(render("tests/text/letter-spacing/on-Arabic"), 0); }
#[test] fn text_text_bidi_reordering() { assert_eq!(render("tests/text/text/bidi-reordering"), 0); }
#[test] fn text_text_complex_grapheme_split_by_tspan() { assert_eq!(render("tests/text/text/complex-grapheme-split-by-tspan"), 0); }
#[test] fn text_text_complex_graphemes_and_coordinates_list() { assert_eq!(render("tests/text/text/complex-graphemes-and-coordinates-list"), 0); }
#[test] fn text_text_complex_graphemes() { assert_eq!(render("tests/text/text/complex-graphemes"), 0); }
#[test] fn text_text_compound_emojis_and_coordinates_list() { assert_eq!(render("tests/text/text/compound-emojis-and-coordinates-list"), 0); }
#[test] fn text_text_compound_emojis() { assert_eq!(render("tests/text/text/compound-emojis"), 0); }
#[test] fn text_text_dx_and_dy_instead_of_x_and_y() { assert_eq!(render("tests/text/text/dx-and-dy-instead-of-x-and-y"), 0); }
#[test] fn text_text_dx_and_dy_with_less_values_than_characters() { assert_eq!(render("tests/text/text/dx-and-dy-with-less-values-than-characters"), 0); }
#[test] fn text_text_dx_and_dy_with_more_values_than_characters() { assert_eq!(render("tests/text/text/dx-and-dy-with-more-values-than-characters"), 0); }
#[test] fn text_text_dx_and_dy_with_multiple_values() { assert_eq!(render("tests/text/text/dx-and-dy-with-multiple-values"), 0); }
#[test] fn text_text_em_and_ex_coordinates() { assert_eq!(render("tests/text/text/em-and-ex-coordinates"), 0); }
#[test] fn text_text_emojis() { assert_eq!(render("tests/text/text/emojis"), 0); }
#[test] fn text_text_escaped_text_1() { assert_eq!(render("tests/text/text/escaped-text-1"), 0); }
#[test] fn text_text_escaped_text_2() { assert_eq!(render("tests/text/text/escaped-text-2"), 0); }
#[test] fn text_text_escaped_text_3() { assert_eq!(render("tests/text/text/escaped-text-3"), 0); }
#[test] fn text_text_escaped_text_4() { assert_eq!(render("tests/text/text/escaped-text-4"), 0); }
#[test] fn text_text_fill_rule_eq_evenodd() { assert_eq!(render("tests/text/text/fill-rule=evenodd"), 0); }
#[test] fn text_text_filter_bbox() { assert_eq!(render("tests/text/text/filter-bbox"), 0); }
#[test] fn text_text_mm_coordinates() { assert_eq!(render("tests/text/text/mm-coordinates"), 0); }
#[test] fn text_text_nested() { assert_eq!(render("tests/text/text/nested"), 0); }
#[test] fn text_text_no_coordinates() { assert_eq!(render("tests/text/text/no-coordinates"), 0); }
#[test] fn text_text_percent_value_on_dx_and_dy() { assert_eq!(render("tests/text/text/percent-value-on-dx-and-dy"), 0); }
#[test] fn text_text_percent_value_on_x_and_y() { assert_eq!(render("tests/text/text/percent-value-on-x-and-y"), 0); }
#[test] fn text_text_real_text_height() { assert_eq!(render("tests/text/text/real-text-height"), 0); }
#[test] fn text_text_rotate_on_Arabic() { assert_eq!(render("tests/text/text/rotate-on-Arabic"), 0); }
#[test] fn text_text_rotate_with_an_invalid_angle() { assert_eq!(render("tests/text/text/rotate-with-an-invalid-angle"), 0); }
#[test] fn text_text_rotate_with_less_values_than_characters() { assert_eq!(render("tests/text/text/rotate-with-less-values-than-characters"), 0); }
#[test] fn text_text_rotate_with_more_values_than_characters() { assert_eq!(render("tests/text/text/rotate-with-more-values-than-characters"), 0); }
#[test] fn text_text_rotate_with_multiple_values_and_complex_text() { assert_eq!(render("tests/text/text/rotate-with-multiple-values-and-complex-text"), 0); }
#[test] fn text_text_rotate_with_multiple_values_underline_and_pattern() { assert_eq!(render("tests/text/text/rotate-with-multiple-values-underline-and-pattern"), 0); }
#[test] fn text_text_rotate_with_multiple_values() { assert_eq!(render("tests/text/text/rotate-with-multiple-values"), 0); }
#[test] fn text_text_rotate() { assert_eq!(render("tests/text/text/rotate"), 0); }
#[test] fn text_text_simple_case() { assert_eq!(render("tests/text/text/simple-case"), 0); }
#[test] fn text_text_transform() { assert_eq!(render("tests/text/text/transform"), 0); }
#[test] fn text_text_x_and_y_with_dx_and_dy_lists() { assert_eq!(render("tests/text/text/x-and-y-with-dx-and-dy-lists"), 0); }
#[test] fn text_text_x_and_y_with_dx_and_dy() { assert_eq!(render("tests/text/text/x-and-y-with-dx-and-dy"), 0); }
#[test] fn text_text_x_and_y_with_less_values_than_characters() { assert_eq!(render("tests/text/text/x-and-y-with-less-values-than-characters"), 0); }
#[test] fn text_text_x_and_y_with_more_values_than_characters() { assert_eq!(render("tests/text/text/x-and-y-with-more-values-than-characters"), 0); }
#[test] fn text_text_x_and_y_with_multiple_values_and_arabic_text() { assert_eq!(render("tests/text/text/x-and-y-with-multiple-values-and-arabic-text"), 0); }
#[test] fn text_text_x_and_y_with_multiple_values_and_tspan() { assert_eq!(render("tests/text/text/x-and-y-with-multiple-values-and-tspan"), 0); }
#[test] fn text_text_x_and_y_with_multiple_values() { assert_eq!(render("tests/text/text/x-and-y-with-multiple-values"), 0); }
#[test] fn text_text_xml_lang_eq_ja() { assert_eq!(render("tests/text/text/xml-lang=ja"), 0); }
#[test] fn text_text_xml_space() { assert_eq!(render("tests/text/text/xml-space"), 0); }
#[test] fn text_text_zalgo() { assert_eq!(render("tests/text/text/zalgo"), 0); }
#[test] fn text_text_anchor_coordinates_list() { assert_eq!(render("tests/text/text-anchor/coordinates-list"), 0); }
#[test] fn text_text_anchor_end_on_text() { assert_eq!(render("tests/text/text-anchor/end-on-text"), 0); }
#[test] fn text_text_anchor_end_with_letter_spacing() { assert_eq!(render("tests/text/text-anchor/end-with-letter-spacing"), 0); }
#[test] fn text_text_anchor_inheritance_1() { assert_eq!(render("tests/text/text-anchor/inheritance-1"), 0); }
#[test] fn text_text_anchor_inheritance_2() { assert_eq!(render("tests/text/text-anchor/inheritance-2"), 0); }
#[test] fn text_text_anchor_inheritance_3() { assert_eq!(render("tests/text/text-anchor/inheritance-3"), 0); }
#[test] fn text_text_anchor_invalid_value_on_text() { assert_eq!(render("tests/text/text-anchor/invalid-value-on-text"), 0); }
#[test] fn text_text_anchor_middle_on_text() { assert_eq!(render("tests/text/text-anchor/middle-on-text"), 0); }
#[test] fn text_text_anchor_on_the_first_tspan() { assert_eq!(render("tests/text/text-anchor/on-the-first-tspan"), 0); }
#[test] fn text_text_anchor_on_tspan_with_arabic() { assert_eq!(render("tests/text/text-anchor/on-tspan-with-arabic"), 0); }
#[test] fn text_text_anchor_on_tspan() { assert_eq!(render("tests/text/text-anchor/on-tspan"), 0); }
#[test] fn text_text_anchor_start_on_text() { assert_eq!(render("tests/text/text-anchor/start-on-text"), 0); }
#[test] fn text_text_anchor_text_anchor_not_on_text_chunk() { assert_eq!(render("tests/text/text-anchor/text-anchor-not-on-text-chunk"), 0); }
#[test] fn text_text_decoration_all_types_inline_comma_separated() { assert_eq!(render("tests/text/text-decoration/all-types-inline-comma-separated"), 0); }
#[test] fn text_text_decoration_all_types_inline_no_spaces() { assert_eq!(render("tests/text/text-decoration/all-types-inline-no-spaces"), 0); }
#[test] fn text_text_decoration_all_types_inline() { assert_eq!(render("tests/text/text-decoration/all-types-inline"), 0); }
#[test] fn text_text_decoration_all_types_nested() { assert_eq!(render("tests/text/text-decoration/all-types-nested"), 0); }
#[test] fn text_text_decoration_indirect() { assert_eq!(render("tests/text/text-decoration/indirect"), 0); }
#[test] fn text_text_decoration_line_through() { assert_eq!(render("tests/text/text-decoration/line-through"), 0); }
#[test] fn text_text_decoration_outside_the_text_element() { assert_eq!(render("tests/text/text-decoration/outside-the-text-element"), 0); }
#[test] fn text_text_decoration_overline() { assert_eq!(render("tests/text/text-decoration/overline"), 0); }
#[test] fn text_text_decoration_style_resolving_1() { assert_eq!(render("tests/text/text-decoration/style-resolving-1"), 0); }
#[test] fn text_text_decoration_style_resolving_2() { assert_eq!(render("tests/text/text-decoration/style-resolving-2"), 0); }
#[test] fn text_text_decoration_style_resolving_3() { assert_eq!(render("tests/text/text-decoration/style-resolving-3"), 0); }
#[test] fn text_text_decoration_style_resolving_4() { assert_eq!(render("tests/text/text-decoration/style-resolving-4"), 0); }
#[test] fn text_text_decoration_tspan_decoration() { assert_eq!(render("tests/text/text-decoration/tspan-decoration"), 0); }
#[test] fn text_text_decoration_underline_with_dy_list_1() { assert_eq!(render("tests/text/text-decoration/underline-with-dy-list-1"), 0); }
#[test] fn text_text_decoration_underline_with_dy_list_2() { assert_eq!(render("tests/text/text-decoration/underline-with-dy-list-2"), 0); }
#[test] fn text_text_decoration_underline_with_rotate_list_3() { assert_eq!(render("tests/text/text-decoration/underline-with-rotate-list-3"), 0); }
#[test] fn text_text_decoration_underline_with_rotate_list_4() { assert_eq!(render("tests/text/text-decoration/underline-with-rotate-list-4"), 0); }
#[test] fn text_text_decoration_underline_with_y_list() { assert_eq!(render("tests/text/text-decoration/underline-with-y-list"), 0); }
#[test] fn text_text_decoration_underline() { assert_eq!(render("tests/text/text-decoration/underline"), 0); }
#[test] fn text_text_decoration_with_textLength_on_a_single_character() { assert_eq!(render("tests/text/text-decoration/with-textLength-on-a-single-character"), 0); }
#[test] fn text_text_rendering_geometricPrecision() { assert_eq!(render("tests/text/text-rendering/geometricPrecision"), 0); }
#[test] fn text_text_rendering_on_tspan() { assert_eq!(render("tests/text/text-rendering/on-tspan"), 0); }
#[test] fn text_text_rendering_optimizeLegibility() { assert_eq!(render("tests/text/text-rendering/optimizeLegibility"), 0); }
#[test] fn text_text_rendering_optimizeSpeed() { assert_eq!(render("tests/text/text-rendering/optimizeSpeed"), 0); }
#[test] fn text_text_rendering_with_underline() { assert_eq!(render("tests/text/text-rendering/with-underline"), 0); }
#[test] fn text_textLength_150_on_parent() { assert_eq!(render("tests/text/textLength/150-on-parent"), 0); }
#[test] fn text_textLength_150_on_tspan() { assert_eq!(render("tests/text/textLength/150-on-tspan"), 0); }
#[test] fn text_textLength_150() { assert_eq!(render("tests/text/textLength/150"), 0); }
#[test] fn text_textLength_40mm() { assert_eq!(render("tests/text/textLength/40mm"), 0); }
#[test] fn text_textLength_75percent() { assert_eq!(render("tests/text/textLength/75percent"), 0); }
#[test] fn text_textLength_arabic_with_lengthAdjust() { assert_eq!(render("tests/text/textLength/arabic-with-lengthAdjust"), 0); }
#[test] fn text_textLength_arabic() { assert_eq!(render("tests/text/textLength/arabic"), 0); }
#[test] fn text_textLength_inherit() { assert_eq!(render("tests/text/textLength/inherit"), 0); }
#[test] fn text_textLength_negative() { assert_eq!(render("tests/text/textLength/negative"), 0); }
#[test] fn text_textLength_on_a_single_tspan() { assert_eq!(render("tests/text/textLength/on-a-single-tspan"), 0); }
#[test] fn text_textLength_on_text_and_tspan() { assert_eq!(render("tests/text/textLength/on-text-and-tspan"), 0); }
#[test] fn text_textLength_zero() { assert_eq!(render("tests/text/textLength/zero"), 0); }
#[test] fn text_textPath_closed_path() { assert_eq!(render("tests/text/textPath/closed-path"), 0); }
#[test] fn text_textPath_complex() { assert_eq!(render("tests/text/textPath/complex"), 0); }
#[test] fn text_textPath_dy_with_tiny_coordinates() { assert_eq!(render("tests/text/textPath/dy-with-tiny-coordinates"), 0); }
#[test] fn text_textPath_invalid_link() { assert_eq!(render("tests/text/textPath/invalid-link"), 0); }
#[test] fn text_textPath_invalid_textPath_in_the_middle() { assert_eq!(render("tests/text/textPath/invalid-textPath-in-the-middle"), 0); }
#[test] fn text_textPath_link_to_rect() { assert_eq!(render("tests/text/textPath/link-to-rect"), 0); }
#[test] fn text_textPath_m_A_path() { assert_eq!(render("tests/text/textPath/m-A-path"), 0); }
#[test] fn text_textPath_m_L_Z_path() { assert_eq!(render("tests/text/textPath/m-L-Z-path"), 0); }
#[test] fn text_textPath_method_eq_stretch() { assert_eq!(render("tests/text/textPath/method=stretch"), 0); }
#[test] fn text_textPath_mixed_children_1() { assert_eq!(render("tests/text/textPath/mixed-children-1"), 0); }
#[test] fn text_textPath_mixed_children_2() { assert_eq!(render("tests/text/textPath/mixed-children-2"), 0); }
#[test] fn text_textPath_nested() { assert_eq!(render("tests/text/textPath/nested"), 0); }
#[test] fn text_textPath_no_link() { assert_eq!(render("tests/text/textPath/no-link"), 0); }
#[test] fn text_textPath_path_with_ClosePath() { assert_eq!(render("tests/text/textPath/path-with-ClosePath"), 0); }
#[test] fn text_textPath_path_with_subpaths_and_startOffset() { assert_eq!(render("tests/text/textPath/path-with-subpaths-and-startOffset"), 0); }
#[test] fn text_textPath_path_with_subpaths() { assert_eq!(render("tests/text/textPath/path-with-subpaths"), 0); }
#[test] fn text_textPath_side_eq_right() { assert_eq!(render("tests/text/textPath/side=right"), 0); }
#[test] fn text_textPath_simple_case() { assert_eq!(render("tests/text/textPath/simple-case"), 0); }
#[test] fn text_textPath_spacing_eq_auto() { assert_eq!(render("tests/text/textPath/spacing=auto"), 0); }
#[test] fn text_textPath_startOffset_eq__100() { assert_eq!(render("tests/text/textPath/startOffset=-100"), 0); }
#[test] fn text_textPath_startOffset_eq_10percent() { assert_eq!(render("tests/text/textPath/startOffset=10percent"), 0); }
#[test] fn text_textPath_startOffset_eq_30() { assert_eq!(render("tests/text/textPath/startOffset=30"), 0); }
#[test] fn text_textPath_startOffset_eq_5mm() { assert_eq!(render("tests/text/textPath/startOffset=5mm"), 0); }
#[test] fn text_textPath_startOffset_eq_9999() { assert_eq!(render("tests/text/textPath/startOffset=9999"), 0); }
#[test] fn text_textPath_tspan_with_absolute_position() { assert_eq!(render("tests/text/textPath/tspan-with-absolute-position"), 0); }
#[test] fn text_textPath_tspan_with_relative_position() { assert_eq!(render("tests/text/textPath/tspan-with-relative-position"), 0); }
#[test] fn text_textPath_two_paths() { assert_eq!(render("tests/text/textPath/two-paths"), 0); }
#[test] fn text_textPath_very_long_text() { assert_eq!(render("tests/text/textPath/very-long-text"), 0); }
#[test] fn text_textPath_with_baseline_shift_and_rotate() { assert_eq!(render("tests/text/textPath/with-baseline-shift-and-rotate"), 0); }
#[test] fn text_textPath_with_baseline_shift() { assert_eq!(render("tests/text/textPath/with-baseline-shift"), 0); }
#[test] fn text_textPath_with_big_letter_spacing() { assert_eq!(render("tests/text/textPath/with-big-letter-spacing"), 0); }
#[test] fn text_textPath_with_coordinates_on_text() { assert_eq!(render("tests/text/textPath/with-coordinates-on-text"), 0); }
#[test] fn text_textPath_with_coordinates_on_textPath() { assert_eq!(render("tests/text/textPath/with-coordinates-on-textPath"), 0); }
#[test] fn text_textPath_with_filter() { assert_eq!(render("tests/text/textPath/with-filter"), 0); }
#[test] fn text_textPath_with_invalid_path_and_xlink_href() { assert_eq!(render("tests/text/textPath/with-invalid-path-and-xlink-href"), 0); }
#[test] fn text_textPath_with_letter_spacing() { assert_eq!(render("tests/text/textPath/with-letter-spacing"), 0); }
#[test] fn text_textPath_with_path_and_xlink_href() { assert_eq!(render("tests/text/textPath/with-path-and-xlink-href"), 0); }
#[test] fn text_textPath_with_path() { assert_eq!(render("tests/text/textPath/with-path"), 0); }
#[test] fn text_textPath_with_rotate() { assert_eq!(render("tests/text/textPath/with-rotate"), 0); }
#[test] fn text_textPath_with_text_anchor() { assert_eq!(render("tests/text/textPath/with-text-anchor"), 0); }
#[test] fn text_textPath_with_transform_on_a_referenced_path() { assert_eq!(render("tests/text/textPath/with-transform-on-a-referenced-path"), 0); }
#[test] fn text_textPath_with_transform_outside_a_referenced_path() { assert_eq!(render("tests/text/textPath/with-transform-outside-a-referenced-path"), 0); }
#[test] fn text_textPath_with_underline() { assert_eq!(render("tests/text/textPath/with-underline"), 0); }
#[test] fn text_textPath_writing_mode_eq_tb() { assert_eq!(render("tests/text/textPath/writing-mode=tb"), 0); }
#[test] fn text_tref_link_to_a_complex_text() { assert_eq!(render("tests/text/tref/link-to-a-complex-text"), 0); }
#[test] fn text_tref_link_to_a_non_SVG_element() { assert_eq!(render("tests/text/tref/link-to-a-non-SVG-element"), 0); }
#[test] fn text_tref_link_to_a_non_text_element() { assert_eq!(render("tests/text/tref/link-to-a-non-text-element"), 0); }
#[test] fn text_tref_link_to_an_external_file_element() { assert_eq!(render("tests/text/tref/link-to-an-external-file-element"), 0); }
#[test] fn text_tref_link_to_text() { assert_eq!(render("tests/text/tref/link-to-text"), 0); }
#[test] fn text_tref_nested() { assert_eq!(render("tests/text/tref/nested"), 0); }
#[test] fn text_tref_position_attributes() { assert_eq!(render("tests/text/tref/position-attributes"), 0); }
#[test] fn text_tref_style_attributes() { assert_eq!(render("tests/text/tref/style-attributes"), 0); }
#[test] fn text_tref_with_a_title_child() { assert_eq!(render("tests/text/tref/with-a-title-child"), 0); }
#[test] fn text_tref_with_text() { assert_eq!(render("tests/text/tref/with-text"), 0); }
#[test] fn text_tref_xml_space() { assert_eq!(render("tests/text/tref/xml-space"), 0); }
#[test] fn text_tspan_bidi_reordering() { assert_eq!(render("tests/text/tspan/bidi-reordering"), 0); }
#[test] fn text_tspan_mixed_font_size() { assert_eq!(render("tests/text/tspan/mixed-font-size"), 0); }
#[test] fn text_tspan_mixed_xml_space_1() { assert_eq!(render("tests/text/tspan/mixed-xml-space-1"), 0); }
#[test] fn text_tspan_mixed_xml_space_2() { assert_eq!(render("tests/text/tspan/mixed-xml-space-2"), 0); }
#[test] fn text_tspan_mixed_xml_space_3() { assert_eq!(render("tests/text/tspan/mixed-xml-space-3"), 0); }
#[test] fn text_tspan_mixed() { assert_eq!(render("tests/text/tspan/mixed"), 0); }
#[test] fn text_tspan_multiple_coordinates() { assert_eq!(render("tests/text/tspan/multiple-coordinates"), 0); }
#[test] fn text_tspan_nested_rotate() { assert_eq!(render("tests/text/tspan/nested-rotate"), 0); }
#[test] fn text_tspan_nested_whitespaces() { assert_eq!(render("tests/text/tspan/nested-whitespaces"), 0); }
#[test] fn text_tspan_nested() { assert_eq!(render("tests/text/tspan/nested"), 0); }
#[test] fn text_tspan_only_with_y() { assert_eq!(render("tests/text/tspan/only-with-y"), 0); }
#[test] fn text_tspan_outside_the_text() { assert_eq!(render("tests/text/tspan/outside-the-text"), 0); }
#[test] fn text_tspan_pseudo_multi_line() { assert_eq!(render("tests/text/tspan/pseudo-multi-line"), 0); }
#[test] fn text_tspan_rotate_and_display_none() { assert_eq!(render("tests/text/tspan/rotate-and-display-none"), 0); }
#[test] fn text_tspan_rotate_on_child() { assert_eq!(render("tests/text/tspan/rotate-on-child"), 0); }
#[test] fn text_tspan_sequential() { assert_eq!(render("tests/text/tspan/sequential"), 0); }
#[test] fn text_tspan_style_override() { assert_eq!(render("tests/text/tspan/style-override"), 0); }
#[test] fn text_tspan_text_shaping_across_multiple_tspan_1() { assert_eq!(render("tests/text/tspan/text-shaping-across-multiple-tspan-1"), 0); }
#[test] fn text_tspan_text_shaping_across_multiple_tspan_2() { assert_eq!(render("tests/text/tspan/text-shaping-across-multiple-tspan-2"), 0); }
#[test] fn text_tspan_transform() { assert_eq!(render("tests/text/tspan/transform"), 0); }
#[test] fn text_tspan_tspan_bbox_1() { assert_eq!(render("tests/text/tspan/tspan-bbox-1"), 0); }
#[test] fn text_tspan_tspan_bbox_2() { assert_eq!(render("tests/text/tspan/tspan-bbox-2"), 0); }
#[test] fn text_tspan_with_clip_path() { assert_eq!(render("tests/text/tspan/with-clip-path"), 0); }
#[test] fn text_tspan_with_dy() { assert_eq!(render("tests/text/tspan/with-dy"), 0); }
#[test] fn text_tspan_with_filter() { assert_eq!(render("tests/text/tspan/with-filter"), 0); }
#[test] fn text_tspan_with_mask() { assert_eq!(render("tests/text/tspan/with-mask"), 0); }
#[test] fn text_tspan_with_opacity() { assert_eq!(render("tests/text/tspan/with-opacity"), 0); }
#[test] fn text_tspan_with_x_and_y() { assert_eq!(render("tests/text/tspan/with-x-and-y"), 0); }
#[test] fn text_tspan_without_attributes() { assert_eq!(render("tests/text/tspan/without-attributes"), 0); }
#[test] fn text_tspan_xml_space_1() { assert_eq!(render("tests/text/tspan/xml-space-1"), 0); }
#[test] fn text_tspan_xml_space_2() { assert_eq!(render("tests/text/tspan/xml-space-2"), 0); }
#[test] fn text_unicode_bidi_bidi_override() { assert_eq!(render("tests/text/unicode-bidi/bidi-override"), 0); }
#[test] fn text_word_spacing__5() { assert_eq!(render("tests/text/word-spacing/-5"), 0); }
#[test] fn text_word_spacing_0() { assert_eq!(render("tests/text/word-spacing/0"), 0); }
#[test] fn text_word_spacing_10() { assert_eq!(render("tests/text/word-spacing/10"), 0); }
#[test] fn text_word_spacing_2mm() { assert_eq!(render("tests/text/word-spacing/2mm"), 0); }
#[test] fn text_word_spacing_5percent() { assert_eq!(render("tests/text/word-spacing/5percent"), 0); }
#[test] fn text_word_spacing_large_negative() { assert_eq!(render("tests/text/word-spacing/large-negative"), 0); }
#[test] fn text_word_spacing_normal() { assert_eq!(render("tests/text/word-spacing/normal"), 0); }
#[test] fn text_writing_mode_arabic_with_rl() { assert_eq!(render("tests/text/writing-mode/arabic-with-rl"), 0); }
#[test] fn text_writing_mode_horizontal_tb() { assert_eq!(render("tests/text/writing-mode/horizontal-tb"), 0); }
#[test] fn text_writing_mode_inheritance() { assert_eq!(render("tests/text/writing-mode/inheritance"), 0); }
#[test] fn text_writing_mode_invalid_value() { assert_eq!(render("tests/text/writing-mode/invalid-value"), 0); }
#[test] fn text_writing_mode_japanese_with_tb() { assert_eq!(render("tests/text/writing-mode/japanese-with-tb"), 0); }
#[test] fn text_writing_mode_lr_tb() { assert_eq!(render("tests/text/writing-mode/lr-tb"), 0); }
#[test] fn text_writing_mode_lr() { assert_eq!(render("tests/text/writing-mode/lr"), 0); }
#[test] fn text_writing_mode_mixed_languages_with_tb_and_underline() { assert_eq!(render("tests/text/writing-mode/mixed-languages-with-tb-and-underline"), 0); }
#[test] fn text_writing_mode_mixed_languages_with_tb() { assert_eq!(render("tests/text/writing-mode/mixed-languages-with-tb"), 0); }
#[test] fn text_writing_mode_on_tspan() { assert_eq!(render("tests/text/writing-mode/on-tspan"), 0); }
#[test] fn text_writing_mode_rl_tb() { assert_eq!(render("tests/text/writing-mode/rl-tb"), 0); }
#[test] fn text_writing_mode_rl() { assert_eq!(render("tests/text/writing-mode/rl"), 0); }
#[test] fn text_writing_mode_tb_and_punctuation() { assert_eq!(render("tests/text/writing-mode/tb-and-punctuation"), 0); }
#[test] fn text_writing_mode_tb_rl() { assert_eq!(render("tests/text/writing-mode/tb-rl"), 0); }
#[test] fn text_writing_mode_tb_with_alignment() { assert_eq!(render("tests/text/writing-mode/tb-with-alignment"), 0); }
#[test] fn text_writing_mode_tb_with_dx_on_second_tspan() { assert_eq!(render("tests/text/writing-mode/tb-with-dx-on-second-tspan"), 0); }
#[test] fn text_writing_mode_tb_with_dx_on_tspan() { assert_eq!(render("tests/text/writing-mode/tb-with-dx-on-tspan"), 0); }
#[test] fn text_writing_mode_tb_with_dy_on_second_tspan() { assert_eq!(render("tests/text/writing-mode/tb-with-dy-on-second-tspan"), 0); }
#[test] fn text_writing_mode_tb_with_rotate_and_underline() { assert_eq!(render("tests/text/writing-mode/tb-with-rotate-and-underline"), 0); }
#[test] fn text_writing_mode_tb_with_rotate() { assert_eq!(render("tests/text/writing-mode/tb-with-rotate"), 0); }
#[test] fn text_writing_mode_tb() { assert_eq!(render("tests/text/writing-mode/tb"), 0); }
#[test] fn text_writing_mode_vertical_lr() { assert_eq!(render("tests/text/writing-mode/vertical-lr"), 0); }
#[test] fn text_writing_mode_vertical_rl() { assert_eq!(render("tests/text/writing-mode/vertical-rl"), 0); }
